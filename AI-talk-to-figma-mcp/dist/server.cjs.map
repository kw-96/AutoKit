{"version":3,"sources":["../src/talk_to_figma_mcp/server.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { z } from \"zod\";\nimport WebSocket from \"ws\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// Load configuration\nlet config: any = {};\ntry {\n  const configPath = path.join(__dirname, \"../../config.json\");\n  if (fs.existsSync(configPath)) {\n    const configData = fs.readFileSync(configPath, 'utf8');\n    config = JSON.parse(configData);\n  }\n} catch (error) {\n  console.error(\"Failed to load config.json:\", error);\n}\n\n// Define TypeScript interfaces for Figma responses\ninterface FigmaResponse {\n  id: string;\n  result?: any;\n  error?: string;\n}\n\n// Define interface for command progress updates\ninterface CommandProgressUpdate {\n  type: 'command_progress';\n  commandId: string;\n  commandType: string;\n  status: 'started' | 'in_progress' | 'completed' | 'error';\n  progress: number;\n  totalItems: number;\n  processedItems: number;\n  currentChunk?: number;\n  totalChunks?: number;\n  chunkSize?: number;\n  message: string;\n  payload?: any;\n  timestamp: number;\n}\n\n// Add TypeScript interfaces for component overrides after line 21\ninterface ComponentOverride {\n  id: string;\n  overriddenFields: string[];\n}\n\n// Update the getInstanceOverridesResult interface to match the plugin implementation\ninterface getInstanceOverridesResult {\n  success: boolean;\n  message: string;\n  sourceInstanceId: string;\n  mainComponentId: string;\n  overridesCount: number;\n}\n\ninterface setInstanceOverridesResult {\n  success: boolean;\n  message: string;\n  totalCount?: number;\n  results?: Array<{\n    success: boolean;\n    instanceId: string;\n    instanceName: string;\n    appliedCount?: number;\n    message?: string;\n  }>;\n}\n\n// Custom logging functions that write to stderr instead of stdout to avoid being captured\nconst logger = {\n  info: (message: string) => process.stderr.write(`[INFO] ${message}\\n`),\n  debug: (message: string) => process.stderr.write(`[DEBUG] ${message}\\n`),\n  warn: (message: string) => process.stderr.write(`[WARN] ${message}\\n`),\n  error: (message: string) => process.stderr.write(`[ERROR] ${message}\\n`),\n  log: (message: string) => process.stderr.write(`[LOG] ${message}\\n`)\n};\n\n// Helper function to validate node types for specific operations\nfunction validateNodeType(nodeType: string, allowedTypes: string[]): boolean {\n  return allowedTypes.includes(nodeType);\n}\n\n// Helper function to check if a node supports fills\nfunction nodeSupportsProperty(nodeType: string, property: string): boolean {\n  const propertyMap: Record<string, string[]> = {\n    'fills': ['RECTANGLE', 'ELLIPSE', 'POLYGON', 'STAR', 'VECTOR', 'TEXT', 'FRAME', 'COMPONENT', 'INSTANCE'],\n    'strokes': ['RECTANGLE', 'ELLIPSE', 'POLYGON', 'STAR', 'VECTOR', 'TEXT', 'FRAME', 'COMPONENT', 'INSTANCE', 'LINE'],\n    'cornerRadius': ['RECTANGLE', 'FRAME', 'COMPONENT', 'INSTANCE'],\n    'characters': ['TEXT'],\n    'style': ['TEXT'],\n    'children': ['FRAME', 'GROUP', 'COMPONENT', 'INSTANCE', 'BOOLEAN_OPERATION'],\n    'layoutMode': ['FRAME', 'COMPONENT', 'INSTANCE']\n  };\n  \n  return propertyMap[property]?.includes(nodeType) || false;\n}\n\n// Helper function to generate CSS tokens from design tokens\nfunction generateCSSTokens(tokens: any): string {\n  let css = `/* Generated Design System CSS Tokens */\\n/* Generated at: ${new Date().toISOString()} */\\n\\n:root {\\n`;\n  \n  // Generate color tokens\n  if (tokens.colors) {\n    css += \"  /* Color Tokens */\\n\";\n    Object.entries(tokens.colors).forEach(([name, token]: [string, any]) => {\n      if (token.value && typeof token.value === 'object') {\n        const { r, g, b } = token.value;\n        const rgbValue = `rgb(${Math.round(r * 255)}, ${Math.round(g * 255)}, ${Math.round(b * 255)})`;\n        css += `  --color-${name}: ${rgbValue};\\n`;\n      }\n    });\n    css += \"\\n\";\n  }\n  \n  // Generate typography tokens\n  if (tokens.typography) {\n    css += \"  /* Typography Tokens */\\n\";\n    Object.entries(tokens.typography).forEach(([name, token]: [string, any]) => {\n      if (token.value) {\n        if (token.value.fontFamily) {\n          css += `  --font-family-${name}: \"${token.value.fontFamily}\";\\n`;\n        }\n        if (token.value.fontSize) {\n          css += `  --font-size-${name}: ${token.value.fontSize}px;\\n`;\n        }\n        if (token.value.fontWeight) {\n          css += `  --font-weight-${name}: ${token.value.fontWeight};\\n`;\n        }\n      }\n    });\n    css += \"\\n\";\n  }\n  \n  css += \"}\\n\";\n  return css;\n}\n\n// Helper function to generate component update script\nfunction generateUpdateScript(designSystem: any): string {\n  return `// Generated Figma Component Update Script\n// Generated at: ${designSystem.metadata.generatedAt}\n\nconst fs = require('fs');\nconst path = require('path');\n\nclass FigmaComponentUpdater {\n  constructor() {\n    this.designSystemPath = path.join(__dirname, 'design-system.json');\n    this.designSystem = null;\n    this.loadDesignSystem();\n  }\n\n  loadDesignSystem() {\n    try {\n      if (fs.existsSync(this.designSystemPath)) {\n        const data = fs.readFileSync(this.designSystemPath, 'utf8');\n        this.designSystem = JSON.parse(data);\n        console.log('✅ 设计系统规范加载成功');\n      } else {\n        console.log('❌ 设计系统规范文件不存在');\n      }\n    } catch (error) {\n      console.error('❌ 加载设计系统规范失败:', error.message);\n    }\n  }\n\n  updateDesignSystem(newData) {\n    try {\n      this.designSystem = {\n        ...this.designSystem,\n        ...newData,\n        metadata: {\n          ...this.designSystem?.metadata,\n          updatedAt: new Date().toISOString()\n        }\n      };\n      \n      const jsonString = JSON.stringify(this.designSystem, null, 2);\n      fs.writeFileSync(this.designSystemPath, jsonString, 'utf8');\n      console.log('✅ 设计系统规范更新成功');\n      return true;\n    } catch (error) {\n      console.error('❌ 更新设计系统规范失败:', error.message);\n      return false;\n    }\n  }\n\n  getComponents() {\n    return this.designSystem?.components || [];\n  }\n\n  getStyles() {\n    return this.designSystem?.styles || {};\n  }\n\n  getTokens() {\n    return this.designSystem?.tokens || {};\n  }\n\n  // 获取组件信息\n  getComponentById(componentId) {\n    const components = this.getComponents();\n    return components.components?.find(comp => comp.id === componentId);\n  }\n\n  // 获取颜色令牌\n  getColorToken(tokenName) {\n    const tokens = this.getTokens();\n    return tokens.colors?.[tokenName];\n  }\n\n  // 获取字体令牌\n  getTypographyToken(tokenName) {\n    const tokens = this.getTokens();\n    return tokens.typography?.[tokenName];\n  }\n\n  // 生成使用报告\n  generateUsageReport() {\n    const components = this.getComponents();\n    const styles = this.getStyles();\n    const tokens = this.getTokens();\n    \n    console.log('📊 设计系统使用报告');\n    console.log('==================');\n    console.log(\\`组件数量: \\${components.count || 0}\\`);\n    console.log(\\`颜色样式: \\${styles.colors?.length || 0}\\`);\n    console.log(\\`文字样式: \\${styles.texts?.length || 0}\\`);\n    console.log(\\`效果样式: \\${styles.effects?.length || 0}\\`);\n    console.log(\\`颜色令牌: \\${Object.keys(tokens.colors || {}).length}\\`);\n    console.log(\\`字体令牌: \\${Object.keys(tokens.typography || {}).length}\\`);\n    console.log('==================');\n  }\n}\n\n// 导出更新器实例\nmodule.exports = new FigmaComponentUpdater();\n\n// 如果直接运行此脚本，显示使用报告\nif (require.main === module) {\n  const updater = module.exports;\n  updater.generateUsageReport();\n}\n`;\n}\n\n// WebSocket connection and request tracking\nlet ws: WebSocket | null = null;\nlet reconnectAttempts = 0;\nconst pendingRequests = new Map<string, {\n  resolve: (value: unknown) => void;\n  reject: (reason: unknown) => void;\n  timeout: ReturnType<typeof setTimeout>;\n  lastActivity: number; // Add timestamp for last activity\n}>();\n\n// Track which channel each client is in\nlet currentChannel: string | null = null;\n\n// Create MCP server\nconst server = new McpServer({\n  name: \"TalkToFigmaMCP\",\n  version: \"1.0.0\",\n});\n\n// Add command line argument parsing\nconst args = process.argv.slice(2);\nconst serverArg = args.find(arg => arg.startsWith('--server='));\nconst serverUrl = serverArg ? serverArg.split('=')[1] : 'localhost';\nconst WS_URL = serverUrl === 'localhost' ? `ws://${serverUrl}` : `wss://${serverUrl}`;\n\n// ==================== 文档信息工具 ====================\n// 工具名称: get_document_info\n// 功能: 获取当前Figma文档的详细信息\nserver.tool(\n  \"get_document_info\",\n  \"Get detailed information about the current Figma document\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma(\"get_document_info\");\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting document info: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 选择信息工具 ====================\n// 工具名称: get_selection\n// 功能: 获取当前在Figma中选中的元素信息\nserver.tool(\n  \"get_selection\",\n  \"Get information about the current selection in Figma\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma(\"get_selection\");\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting selection: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 读取设计工具 ====================\n// 工具名称: read_my_design\n// 功能: 获取当前选中元素的详细信息，包括所有节点详情\nserver.tool(\n  \"read_my_design\",\n  \"Get detailed information about the current selection in Figma, including all node details\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma(\"read_my_design\", {});\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting node info: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 节点信息工具 ====================\n// 工具名称: get_node_info\n// 功能: 获取指定节点的详细信息\nserver.tool(\n  \"get_node_info\",\n  \"Get detailed information about a specific node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to get information about\"),\n  },\n  async ({ nodeId }) => {\n    try {\n      const result = await sendCommandToFigma(\"get_node_info\", { nodeId });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(filterFigmaNode(result))\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting node info: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nfunction rgbaToHex(color: any): string {\n  // 如果已经是字符串格式（hex），直接返回\n  if (typeof color === 'string' && color.startsWith('#')) {\n    return color;\n  }\n\n  // 检查是否是有效的RGBA对象\n  if (!color || typeof color !== 'object' || \n      typeof color.r !== 'number' || \n      typeof color.g !== 'number' || \n      typeof color.b !== 'number') {\n    return '#000000'; // 默认黑色\n  }\n\n  const r = Math.round(Math.max(0, Math.min(1, color.r)) * 255);\n  const g = Math.round(Math.max(0, Math.min(1, color.g)) * 255);\n  const b = Math.round(Math.max(0, Math.min(1, color.b)) * 255);\n  const a = color.a !== undefined ? Math.round(Math.max(0, Math.min(1, color.a)) * 255) : 255;\n\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}${a === 255 ? '' : a.toString(16).padStart(2, '0')}`;\n}\n\nfunction filterFigmaNode(node: any) {\n  // Skip VECTOR type nodes\n  if (node.type === \"VECTOR\") {\n    return null;\n  }\n\n  const filtered: any = {\n    id: node.id,\n    name: node.name,\n    type: node.type,\n  };\n\n  // 检查节点是否支持fills属性\n  if (nodeSupportsProperty(node.type, 'fills') && node.fills && Array.isArray(node.fills) && node.fills.length > 0) {\n    filtered.fills = node.fills.map((fill: any) => {\n      const processedFill = { ...fill };\n\n      // Remove boundVariables and imageRef\n      delete processedFill.boundVariables;\n      delete processedFill.imageRef;\n\n      // Process gradientStops if present\n      if (processedFill.gradientStops) {\n        processedFill.gradientStops = processedFill.gradientStops.map((stop: any) => {\n          const processedStop = { ...stop };\n          // Convert color to hex if present\n          if (processedStop.color) {\n            processedStop.color = rgbaToHex(processedStop.color);\n          }\n          // Remove boundVariables\n          delete processedStop.boundVariables;\n          return processedStop;\n        });\n      }\n\n      // Convert solid fill colors to hex\n      if (processedFill.color) {\n        processedFill.color = rgbaToHex(processedFill.color);\n      }\n\n      return processedFill;\n    });\n  }\n\n  // 检查节点是否支持strokes属性\n  if (nodeSupportsProperty(node.type, 'strokes') && node.strokes && Array.isArray(node.strokes) && node.strokes.length > 0) {\n    filtered.strokes = node.strokes.map((stroke: any) => {\n      const processedStroke = { ...stroke };\n      // Remove boundVariables\n      delete processedStroke.boundVariables;\n      // Convert color to hex if present\n      if (processedStroke.color) {\n        processedStroke.color = rgbaToHex(processedStroke.color);\n      }\n      return processedStroke;\n    });\n  }\n\n  // 检查节点是否支持cornerRadius属性\n  if (nodeSupportsProperty(node.type, 'cornerRadius') && node.cornerRadius !== undefined) {\n    filtered.cornerRadius = node.cornerRadius;\n  }\n\n  if (node.absoluteBoundingBox) {\n    filtered.absoluteBoundingBox = node.absoluteBoundingBox;\n  }\n\n  // 检查节点是否支持文本相关属性\n  if (nodeSupportsProperty(node.type, 'characters')) {\n    if (node.characters) {\n      filtered.characters = node.characters;\n    }\n\n    if (node.style) {\n      filtered.style = {\n        fontFamily: node.style.fontFamily,\n        fontStyle: node.style.fontStyle,\n        fontWeight: node.style.fontWeight,\n        fontSize: node.style.fontSize,\n        textAlignHorizontal: node.style.textAlignHorizontal,\n        letterSpacing: node.style.letterSpacing,\n        lineHeightPx: node.style.lineHeightPx\n      };\n    }\n  }\n\n  // 检查节点是否支持children属性\n  if (nodeSupportsProperty(node.type, 'children') && node.children && Array.isArray(node.children)) {\n    filtered.children = node.children\n      .map((child: any) => filterFigmaNode(child))\n      .filter((child: any) => child !== null); // Remove null children (VECTOR nodes)\n  }\n\n  return filtered;\n}\n\n// ==================== 多节点信息工具 ====================\n// 工具名称: get_nodes_info\n// 功能: 获取多个节点的详细信息\nserver.tool(\n  \"get_nodes_info\",\n  \"Get detailed information about multiple nodes in Figma\",\n  {\n    nodeIds: z.array(z.string()).describe(\"Array of node IDs to get information about\")\n  },\n  async ({ nodeIds }) => {\n    try {\n      const results = await Promise.all(\n        nodeIds.map(async (nodeId) => {\n          const result = await sendCommandToFigma('get_node_info', { nodeId });\n          return { nodeId, info: result };\n        })\n      );\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(results.map((result) => filterFigmaNode(result.info)))\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting nodes info: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n\n// ==================== 创建矩形工具 ====================\n// 工具名称: create_rectangle\n// 功能: 在Figma中创建新的矩形元素\nserver.tool(\n  \"create_rectangle\",\n  \"Create a new rectangle in Figma\",\n  {\n    x: z.number().describe(\"X position\"),\n    y: z.number().describe(\"Y position\"),\n    width: z.number().describe(\"Width of the rectangle\"),\n    height: z.number().describe(\"Height of the rectangle\"),\n    name: z.string().optional().describe(\"Optional name for the rectangle\"),\n    parentId: z\n      .string()\n      .optional()\n      .describe(\"Optional parent node ID to append the rectangle to\"),\n  },\n  async ({ x, y, width, height, name, parentId }) => {\n    try {\n      const result = await sendCommandToFigma(\"create_rectangle\", {\n        x,\n        y,\n        width,\n        height,\n        name: name || \"Rectangle\",\n        parentId,\n      });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Created rectangle \"${JSON.stringify(result)}\"`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating rectangle: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 创建框架工具 ====================\n// 工具名称: create_frame\n// 功能: 在Figma中创建新的框架容器\nserver.tool(\n  \"create_frame\",\n  \"Create a new frame in Figma\",\n  {\n    x: z.number().describe(\"X position\"),\n    y: z.number().describe(\"Y position\"),\n    width: z.number().describe(\"Width of the frame\"),\n    height: z.number().describe(\"Height of the frame\"),\n    name: z.string().optional().describe(\"Optional name for the frame\"),\n    parentId: z\n      .string()\n      .optional()\n      .describe(\"Optional parent node ID to append the frame to\"),\n    fillColor: z\n      .object({\n        r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n        g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n        b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n        a: z\n          .number()\n          .min(0)\n          .max(1)\n          .optional()\n          .describe(\"Alpha component (0-1)\"),\n      })\n      .optional()\n      .describe(\"Fill color in RGBA format\"),\n    strokeColor: z\n      .object({\n        r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n        g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n        b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n        a: z\n          .number()\n          .min(0)\n          .max(1)\n          .optional()\n          .describe(\"Alpha component (0-1)\"),\n      })\n      .optional()\n      .describe(\"Stroke color in RGBA format\"),\n    strokeWeight: z.number().positive().optional().describe(\"Stroke weight\"),\n    layoutMode: z.enum([\"NONE\", \"HORIZONTAL\", \"VERTICAL\"]).optional().describe(\"Auto-layout mode for the frame\"),\n    layoutWrap: z.enum([\"NO_WRAP\", \"WRAP\"]).optional().describe(\"Whether the auto-layout frame wraps its children\"),\n    paddingTop: z.number().optional().describe(\"Top padding for auto-layout frame\"),\n    paddingRight: z.number().optional().describe(\"Right padding for auto-layout frame\"),\n    paddingBottom: z.number().optional().describe(\"Bottom padding for auto-layout frame\"),\n    paddingLeft: z.number().optional().describe(\"Left padding for auto-layout frame\"),\n    primaryAxisAlignItems: z\n      .enum([\"MIN\", \"MAX\", \"CENTER\", \"SPACE_BETWEEN\"])\n      .optional()\n      .describe(\"Primary axis alignment for auto-layout frame. Note: When set to SPACE_BETWEEN, itemSpacing will be ignored as children will be evenly spaced.\"),\n    counterAxisAlignItems: z.enum([\"MIN\", \"MAX\", \"CENTER\", \"BASELINE\"]).optional().describe(\"Counter axis alignment for auto-layout frame\"),\n    layoutSizingHorizontal: z.enum([\"FIXED\", \"HUG\", \"FILL\"]).optional().describe(\"Horizontal sizing mode for auto-layout frame\"),\n    layoutSizingVertical: z.enum([\"FIXED\", \"HUG\", \"FILL\"]).optional().describe(\"Vertical sizing mode for auto-layout frame\"),\n    itemSpacing: z\n      .number()\n      .optional()\n      .describe(\"Distance between children in auto-layout frame. Note: This value will be ignored if primaryAxisAlignItems is set to SPACE_BETWEEN.\")\n  },\n  async ({\n    x,\n    y,\n    width,\n    height,\n    name,\n    parentId,\n    fillColor,\n    strokeColor,\n    strokeWeight,\n    layoutMode,\n    layoutWrap,\n    paddingTop,\n    paddingRight,\n    paddingBottom,\n    paddingLeft,\n    primaryAxisAlignItems,\n    counterAxisAlignItems,\n    layoutSizingHorizontal,\n    layoutSizingVertical,\n    itemSpacing\n  }) => {\n    try {\n      const result = await sendCommandToFigma(\"create_frame\", {\n        x,\n        y,\n        width,\n        height,\n        name: name || \"Frame\",\n        parentId,\n        fillColor: fillColor || { r: 1, g: 1, b: 1, a: 1 },\n        strokeColor: strokeColor,\n        strokeWeight: strokeWeight,\n        layoutMode,\n        layoutWrap,\n        paddingTop,\n        paddingRight,\n        paddingBottom,\n        paddingLeft,\n        primaryAxisAlignItems,\n        counterAxisAlignItems,\n        layoutSizingHorizontal,\n        layoutSizingVertical,\n        itemSpacing\n      });\n      const typedResult = result as { name: string; id: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Created frame \"${typedResult.name}\" with ID: ${typedResult.id}. Use the ID as the parentId to appendChild inside this frame.`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating frame: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 创建文本工具 ====================\n// 工具名称: create_text\n// 功能: 在Figma中创建新的文本元素\nserver.tool(\n  \"create_text\",\n  \"Create a new text element in Figma\",\n  {\n    x: z.number().describe(\"X position\"),\n    y: z.number().describe(\"Y position\"),\n    text: z.string().describe(\"Text content\"),\n    fontSize: z.number().optional().describe(\"Font size (default: 14)\"),\n    fontWeight: z\n      .number()\n      .optional()\n      .describe(\"Font weight (e.g., 400 for Regular, 700 for Bold)\"),\n    fontColor: z\n      .object({\n        r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n        g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n        b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n        a: z\n          .number()\n          .min(0)\n          .max(1)\n          .optional()\n          .describe(\"Alpha component (0-1)\"),\n      })\n      .optional()\n      .describe(\"Font color in RGBA format\"),\n    name: z\n      .string()\n      .optional()\n      .describe(\"Semantic layer name for the text node\"),\n    parentId: z\n      .string()\n      .optional()\n      .describe(\"Optional parent node ID to append the text to\"),\n  },\n  async ({ x, y, text, fontSize, fontWeight, fontColor, name, parentId }) => {\n    try {\n      const result = await sendCommandToFigma(\"create_text\", {\n        x,\n        y,\n        text,\n        fontSize: fontSize || 14,\n        fontWeight: fontWeight || 400,\n        fontColor: fontColor || { r: 0, g: 0, b: 0, a: 1 },\n        name: name || \"Text\",\n        parentId,\n      });\n      const typedResult = result as { name: string; id: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Created text \"${typedResult.name}\" with ID: ${typedResult.id}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating text: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 设置填充颜色工具 ====================\n// 工具名称: set_fill_color\n// 功能: 设置节点的填充颜色（支持文本节点和框架节点）\nserver.tool(\n  \"set_fill_color\",\n  \"Set the fill color of a node in Figma can be TextNode or FrameNode\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to modify\"),\n    r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n    g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n    b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n    a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n  },\n  async ({ nodeId, r, g, b, a }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_fill_color\", {\n        nodeId,\n        color: { r, g, b, a: a || 1 },\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set fill color of node \"${typedResult.name\n              }\" to RGBA(${r}, ${g}, ${b}, ${a || 1})`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting fill color: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 设置描边颜色工具 ====================\n// 工具名称: set_stroke_color\n// 功能: 设置节点的描边颜色和粗细\nserver.tool(\n  \"set_stroke_color\",\n  \"Set the stroke color of a node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to modify\"),\n    r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n    g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n    b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n    a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n    weight: z.number().positive().optional().describe(\"Stroke weight\"),\n  },\n  async ({ nodeId, r, g, b, a, weight }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_stroke_color\", {\n        nodeId,\n        color: { r, g, b, a: a || 1 },\n        weight: weight || 1,\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set stroke color of node \"${typedResult.name\n              }\" to RGBA(${r}, ${g}, ${b}, ${a || 1}) with weight ${weight || 1}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting stroke color: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 移动节点工具 ====================\n// 工具名称: move_node\n// 功能: 将节点移动到新的位置\nserver.tool(\n  \"move_node\",\n  \"Move a node to a new position in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to move\"),\n    x: z.number().describe(\"New X position\"),\n    y: z.number().describe(\"New Y position\"),\n  },\n  async ({ nodeId, x, y }) => {\n    try {\n      const result = await sendCommandToFigma(\"move_node\", { nodeId, x, y });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Moved node \"${typedResult.name}\" to position (${x}, ${y})`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error moving node: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 移动节点到父容器工具 ====================\n// 工具名称: move_node_to_parent\n// 功能: 将节点移动到指定的父容器中\nserver.tool(\n  \"move_node_to_parent\",\n  \"Move a node to a specified parent container in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to move\"),\n    parentId: z.string().describe(\"The ID of the parent container to move the node into\"),\n    x: z.number().optional().describe(\"Optional X position within the parent container\"),\n    y: z.number().optional().describe(\"Optional Y position within the parent container\"),\n    index: z.number().optional().describe(\"Optional index position in the parent's children array\")\n  },\n  async ({ nodeId, parentId, x, y, index }) => {\n    try {\n      const result = await sendCommandToFigma(\"move_node_to_parent\", { \n        nodeId, \n        parentId, \n        x, \n        y, \n        index \n      });\n      const typedResult = result as { name: string; parentName: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Successfully moved node \"${typedResult.name}\" to parent container \"${typedResult.parentName}\"${x !== undefined && y !== undefined ? ` at position (${x}, ${y})` : ''}${index !== undefined ? ` at index ${index}` : ''}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error moving node to parent: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 批量移动节点到父容器工具 ====================\n// 工具名称: move_multiple_nodes_to_parent\n// 功能: 批量将多个节点移动到指定的父容器中\nserver.tool(\n  \"move_multiple_nodes_to_parent\",\n  \"Move multiple nodes to a specified parent container in Figma\",\n  {\n    nodeIds: z.array(z.string()).describe(\"Array of node IDs to move\"),\n    parentId: z.string().describe(\"The ID of the parent container to move the nodes into\"),\n    preserveRelativePositions: z.boolean().default(true).describe(\"Whether to preserve relative positions between nodes\"),\n    startIndex: z.number().optional().describe(\"Starting index position in the parent's children array\")\n  },\n  async ({ nodeIds, parentId, preserveRelativePositions, startIndex }) => {\n    try {\n      const results: any[] = [];\n      const errors: string[] = [];\n      \n      for (let i = 0; i < nodeIds.length; i++) {\n        const nodeId = nodeIds[i];\n        try {\n          const result = await sendCommandToFigma(\"move_node_to_parent\", {\n            nodeId,\n            parentId,\n            index: startIndex !== undefined ? startIndex + i : undefined\n          });\n          \n          results.push({\n            nodeId,\n            success: true,\n            result\n          });\n        } catch (moveError) {\n          const errorMsg = `Failed to move node ${nodeId}: ${moveError instanceof Error ? moveError.message : String(moveError)}`;\n          errors.push(errorMsg);\n          results.push({\n            nodeId,\n            success: false,\n            error: errorMsg\n          });\n        }\n      }\n      \n      const successCount = results.filter(r => r.success).length;\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `批量移动节点到父容器完成！\n\n📊 移动统计:\n✅ 成功: ${successCount}/${nodeIds.length}\n❌ 失败: ${errors.length}\n📁 目标父容器: ${parentId}\n🔄 保持相对位置: ${preserveRelativePositions ? '是' : '否'}\n\n${successCount > 0 ? `✅ 成功移动的节点:\n${results.filter(r => r.success).map((r, index) => \n  `${index + 1}. ${r.nodeId}`\n).join('\\n')}` : ''}\n\n${errors.length > 0 ? `❌ 移动失败的节点:\n${errors.map((error, index) => `${index + 1}. ${error}`).join('\\n')}` : ''}\n\n💡 建议:\n- 确认父容器ID是否正确\n- 检查节点是否存在且可移动\n- 验证父容器是否支持子节点`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 批量移动节点失败: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 克隆节点工具 ====================\n// 工具名称: clone_node\n// 功能: 克隆现有节点并可选择新位置\nserver.tool(\n  \"clone_node\",\n  \"Clone an existing node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to clone\"),\n    x: z.number().optional().describe(\"New X position for the clone\"),\n    y: z.number().optional().describe(\"New Y position for the clone\")\n  },\n  async ({ nodeId, x, y }) => {\n    try {\n      const result = await sendCommandToFigma('clone_node', { nodeId, x, y });\n      const typedResult = result as { name: string, id: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Cloned node \"${typedResult.name}\" with new ID: ${typedResult.id}${x !== undefined && y !== undefined ? ` at position (${x}, ${y})` : ''}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error cloning node: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 调整节点大小工具 ====================\n// 工具名称: resize_node\n// 功能: 调整节点的宽度和高度\nserver.tool(\n  \"resize_node\",\n  \"Resize a node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to resize\"),\n    width: z.number().positive().describe(\"New width\"),\n    height: z.number().positive().describe(\"New height\"),\n  },\n  async ({ nodeId, width, height }) => {\n    try {\n      const result = await sendCommandToFigma(\"resize_node\", {\n        nodeId,\n        width,\n        height,\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Resized node \"${typedResult.name}\" to width ${width} and height ${height}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error resizing node: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 删除节点工具 ====================\n// 工具名称: delete_node\n// 功能: 从Figma中删除指定节点\nserver.tool(\n  \"delete_node\",\n  \"Delete a node from Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to delete\"),\n  },\n  async ({ nodeId }) => {\n    try {\n      await sendCommandToFigma(\"delete_node\", { nodeId });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Deleted node with ID: ${nodeId}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error deleting node: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 批量删除节点工具 ====================\n// 工具名称: delete_multiple_nodes\n// 功能: 一次性删除多个节点\nserver.tool(\n  \"delete_multiple_nodes\",\n  \"Delete multiple nodes from Figma at once\",\n  {\n    nodeIds: z.array(z.string()).describe(\"Array of node IDs to delete\"),\n  },\n  async ({ nodeIds }) => {\n    try {\n      const result = await sendCommandToFigma(\"delete_multiple_nodes\", { nodeIds });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error deleting multiple nodes: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 导出节点为图片工具 ====================\n// 工具名称: export_node_as_image\n// 功能: 将节点导出为图片文件\nserver.tool(\n  \"export_node_as_image\",\n  \"Export a node as an image from Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to export\"),\n    format: z\n      .enum([\"PNG\", \"JPG\", \"SVG\", \"PDF\"])\n      .optional()\n      .describe(\"Export format\"),\n    scale: z.number().positive().optional().describe(\"Export scale\"),\n  },\n  async ({ nodeId, format, scale }) => {\n    try {\n      const result = await sendCommandToFigma(\"export_node_as_image\", {\n        nodeId,\n        format: format || \"PNG\",\n        scale: scale || 1,\n      });\n      const typedResult = result as { imageData: string; mimeType: string };\n\n      return {\n        content: [\n          {\n            type: \"image\",\n            data: typedResult.imageData,\n            mimeType: typedResult.mimeType || \"image/png\",\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error exporting node as image: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 设置文本内容工具 ====================\n// 工具名称: set_text_content\n// 功能: 设置现有文本节点的内容\nserver.tool(\n  \"set_text_content\",\n  \"Set the text content of an existing text node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the text node to modify\"),\n    text: z.string().describe(\"New text content\"),\n  },\n  async ({ nodeId, text }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_text_content\", {\n        nodeId,\n        text,\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Updated text content of node \"${typedResult.name}\" to \"${text}\"`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting text content: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 获取样式工具 ====================\n// 工具名称: get_styles\n// 功能: 获取当前Figma文档中的所有样式\nserver.tool(\n  \"get_styles\",\n  \"Get all styles from the current Figma document\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma(\"get_styles\");\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting styles: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 获取本地组件工具 ====================\n// 工具名称: get_local_components\n// 功能: 获取Figma文档中的所有本地组件\nserver.tool(\n  \"get_local_components\",\n  \"Get all local components from the Figma document\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma(\"get_local_components\");\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting local components: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 生成设计系统规范工具 ====================\n// 工具名称: generate_design_system_specification\n// 功能: 从当前Figma文档生成完整的设计系统规范，包括组件、样式和设计令牌\nserver.tool(\n  \"generate_design_system_specification\",\n  \"Generate a comprehensive design system specification from the current Figma document, including components, styles, and design tokens. This tool creates JSON files with detailed design system information.\",\n  {\n    outputPath: z.string().optional().describe(\"Optional custom output path for the generated files. Defaults to './json' directory\"),\n    includeComponents: z.boolean().optional().default(true).describe(\"Whether to include component specifications\"),\n    includeStyles: z.boolean().optional().default(true).describe(\"Whether to include style specifications (colors, typography, effects)\"),\n    includeTokens: z.boolean().optional().default(true).describe(\"Whether to generate design tokens\"),\n    format: z.enum([\"json\", \"typescript\", \"css\"]).optional().default(\"json\").describe(\"Output format for the specification\")\n  },\n  async ({ outputPath, includeComponents, includeStyles, includeTokens, format }) => {\n    try {\n      // 确保输出目录存在，优先使用配置文件中的默认路径\n      const defaultPath = config?.settings?.designSystem?.outputPath || path.join(process.cwd(), \"json\");\n      const outputDir = outputPath || path.resolve(__dirname, defaultPath);\n      if (!fs.existsSync(outputDir)) {\n        fs.mkdirSync(outputDir, { recursive: true });\n      }\n\n      const designSystem: any = {\n        metadata: {\n          generatedAt: new Date().toISOString(),\n          version: \"1.0.0\",\n          source: \"Figma Document\"\n        }\n      };\n\n      // 获取文档信息\n      const documentInfo = await sendCommandToFigma(\"get_document_info\");\n      designSystem.document = documentInfo;\n\n      // 获取组件信息\n      if (includeComponents) {\n        const components = await sendCommandToFigma(\"get_local_components\");\n        designSystem.components = components;\n      }\n\n      // 获取样式信息\n      if (includeStyles) {\n        const styles = await sendCommandToFigma(\"get_styles\");\n        designSystem.styles = styles;\n      }\n\n      // 生成设计令牌\n      if (includeTokens && designSystem.styles) {\n        designSystem.tokens = {\n          colors: {},\n          typography: {},\n          spacing: {},\n          effects: {}\n        };\n\n        // 处理颜色令牌\n        if (designSystem.styles.colors) {\n          designSystem.styles.colors.forEach((color: any) => {\n            const tokenName = color.name.toLowerCase().replace(/\\s+/g, '-');\n            designSystem.tokens.colors[tokenName] = {\n              value: color.paint?.color || color.paint,\n              type: \"color\",\n              description: `Color token for ${color.name}`\n            };\n          });\n        }\n\n        // 处理字体令牌\n        if (designSystem.styles.texts) {\n          designSystem.styles.texts.forEach((text: any) => {\n            const tokenName = text.name.toLowerCase().replace(/\\s+/g, '-');\n            designSystem.tokens.typography[tokenName] = {\n              value: {\n                fontFamily: text.fontName?.family,\n                fontSize: text.fontSize,\n                fontWeight: text.fontName?.style\n              },\n              type: \"typography\",\n              description: `Typography token for ${text.name}`\n            };\n          });\n        }\n      }\n\n      // 根据格式生成文件\n      let fileName: string;\n      let fileContent: string;\n\n      switch (format) {\n        case \"typescript\":\n          fileName = \"design-system.ts\";\n          fileContent = `// Generated Design System Specification\n// Generated at: ${designSystem.metadata.generatedAt}\n\nexport const designSystem = ${JSON.stringify(designSystem, null, 2)} as const;\n\nexport type DesignSystem = typeof designSystem;\n`;\n          break;\n        case \"css\":\n          fileName = \"design-system.css\";\n          fileContent = generateCSSTokens(designSystem.tokens || {});\n          break;\n        default:\n          fileName = \"design-system.json\";\n          fileContent = JSON.stringify(designSystem, null, 2);\n      }\n\n      const filePath = path.join(outputDir, fileName);\n      fs.writeFileSync(filePath, fileContent, 'utf8');\n\n      // 生成组件更新脚本\n      if (includeComponents) {\n        const updateScriptPath = path.join(outputDir, \"update-figma-components.js\");\n        const updateScript = generateUpdateScript(designSystem);\n        fs.writeFileSync(updateScriptPath, updateScript, 'utf8');\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `✅ 设计系统规范生成成功！\n\n📁 生成的文件：\n- ${fileName}: 主要设计系统规范文件\n${includeComponents ? `- update-figma-components.js: 组件更新脚本` : ''}\n\n📊 包含内容：\n- 文档信息: ${designSystem.document ? '✅' : '❌'}\n- 组件规范: ${includeComponents && designSystem.components ? `✅ (${designSystem.components.count || 0} 个组件)` : '❌'}\n- 样式规范: ${includeStyles && designSystem.styles ? '✅' : '❌'}\n- 设计令牌: ${includeTokens && designSystem.tokens ? '✅' : '❌'}\n\n📍 输出路径: ${filePath}\n\n💡 使用说明：\n1. 设计系统规范文件包含了当前Figma文档的完整设计信息\n2. 可以在代码中导入使用，确保设计与开发的一致性\n3. 当设计更新时，重新运行此工具即可更新规范文件`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 生成设计系统规范时出错: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 获取注释工具 ====================\n// 工具名称: get_annotations\n// 功能: 获取当前文档或指定节点的所有注释\nserver.tool(\n  \"get_annotations\",\n  \"Get all annotations in the current document or specific node\",\n  {\n    nodeId: z.string().optional().describe(\"Optional node ID to get annotations for specific node\"),\n    includeCategories: z.boolean().optional().default(true).describe(\"Whether to include category information\")\n  },\n  async ({ nodeId, includeCategories }) => {\n    try {\n      const result = await sendCommandToFigma(\"get_annotations\", {\n        nodeId,\n        includeCategories\n      });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting annotations: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 设置注释工具 ====================\n// 工具名称: set_annotation\n// 功能: 创建或更新注释\nserver.tool(\n  \"set_annotation\",\n  \"Create or update an annotation\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to annotate\"),\n    annotationId: z.string().optional().describe(\"The ID of the annotation to update (if updating existing annotation)\"),\n    labelMarkdown: z.string().describe(\"The annotation text in markdown format\"),\n    categoryId: z.string().optional().describe(\"The ID of the annotation category\"),\n    properties: z.array(z.object({\n      type: z.string()\n    })).optional().describe(\"Additional properties for the annotation\")\n  },\n  async ({ nodeId, annotationId, labelMarkdown, categoryId, properties }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_annotation\", {\n        nodeId,\n        annotationId,\n        labelMarkdown,\n        categoryId,\n        properties\n      });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting annotation: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\ninterface SetMultipleAnnotationsParams {\n  nodeId: string;\n  annotations: Array<{\n    nodeId: string;\n    labelMarkdown: string;\n    categoryId?: string;\n    annotationId?: string;\n    properties?: Array<{ type: string }>;\n  }>;\n}\n\n// ==================== 批量设置注释工具 ====================\n// 工具名称: set_multiple_annotations\n// 功能: 在节点中并行设置多个注释\nserver.tool(\n  \"set_multiple_annotations\",\n  \"Set multiple annotations parallelly in a node\",\n  {\n    nodeId: z\n      .string()\n      .describe(\"The ID of the node containing the elements to annotate\"),\n    annotations: z\n      .array(\n        z.object({\n          nodeId: z.string().describe(\"The ID of the node to annotate\"),\n          labelMarkdown: z.string().describe(\"The annotation text in markdown format\"),\n          categoryId: z.string().optional().describe(\"The ID of the annotation category\"),\n          annotationId: z.string().optional().describe(\"The ID of the annotation to update (if updating existing annotation)\"),\n          properties: z.array(z.object({\n            type: z.string()\n          })).optional().describe(\"Additional properties for the annotation\")\n        })\n      )\n      .describe(\"Array of annotations to apply\"),\n  },\n  async ({ nodeId, annotations }, extra) => {\n    try {\n      if (!annotations || annotations.length === 0) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"No annotations provided\",\n            },\n          ],\n        };\n      }\n\n      // Initial response to indicate we're starting the process\n      const initialStatus = {\n        type: \"text\" as const,\n        text: `Starting annotation process for ${annotations.length} nodes. This will be processed in batches of 5...`,\n      };\n\n      // Track overall progress\n      let totalProcessed = 0;\n      const totalToProcess = annotations.length;\n\n      // Use the plugin's set_multiple_annotations function with chunking\n      const result = await sendCommandToFigma(\"set_multiple_annotations\", {\n        nodeId,\n        annotations,\n      });\n\n      // Cast the result to a specific type to work with it safely\n      interface AnnotationResult {\n        success: boolean;\n        nodeId: string;\n        annotationsApplied?: number;\n        annotationsFailed?: number;\n        totalAnnotations?: number;\n        completedInChunks?: number;\n        results?: Array<{\n          success: boolean;\n          nodeId: string;\n          error?: string;\n          annotationId?: string;\n        }>;\n      }\n\n      const typedResult = result as AnnotationResult;\n\n      // Format the results for display\n      const success = typedResult.annotationsApplied && typedResult.annotationsApplied > 0;\n      const progressText = `\n      Annotation process completed:\n      - ${typedResult.annotationsApplied || 0} of ${totalToProcess} successfully applied\n      - ${typedResult.annotationsFailed || 0} failed\n      - Processed in ${typedResult.completedInChunks || 1} batches\n      `;\n\n      // Detailed results\n      const detailedResults = typedResult.results || [];\n      const failedResults = detailedResults.filter(item => !item.success);\n\n      // Create the detailed part of the response\n      let detailedResponse = \"\";\n      if (failedResults.length > 0) {\n        detailedResponse = `\\n\\nNodes that failed:\\n${failedResults.map(item =>\n          `- ${item.nodeId}: ${item.error || \"Unknown error\"}`\n        ).join('\\n')}`;\n      }\n\n      return {\n        content: [\n          initialStatus,\n          {\n            type: \"text\" as const,\n            text: progressText + detailedResponse,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting multiple annotations: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 创建组件实例工具 ====================\n// 工具名称: create_component_instance\n// 功能: 在Figma中创建组件的实例\nserver.tool(\n  \"create_component_instance\",\n  \"Create an instance of a component in Figma\",\n  {\n    componentKey: z.string().describe(\"Key of the component to instantiate\"),\n    x: z.number().describe(\"X position\"),\n    y: z.number().describe(\"Y position\"),\n  },\n  async ({ componentKey, x, y }) => {\n    try {\n      const result = await sendCommandToFigma(\"create_component_instance\", {\n        componentKey,\n        x,\n        y,\n      });\n      const typedResult = result as any;\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(typedResult),\n          }\n        ]\n      }\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating component instance: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 获取实例覆盖工具 ====================\n// 工具名称: get_instance_overrides\n// 功能: 获取选中组件实例的所有覆盖属性，可应用到其他实例\nserver.tool(\n  \"get_instance_overrides\",\n  \"Get all override properties from a selected component instance. These overrides can be applied to other instances, which will swap them to match the source component.\",\n  {\n    nodeId: z.string().optional().describe(\"Optional ID of the component instance to get overrides from. If not provided, currently selected instance will be used.\"),\n  },\n  async ({ nodeId }) => {\n    try {\n      const result = await sendCommandToFigma(\"get_instance_overrides\", { \n        instanceNodeId: nodeId || null \n      });\n      const typedResult = result as getInstanceOverridesResult;\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: typedResult.success \n              ? `Successfully got instance overrides: ${typedResult.message}`\n              : `Failed to get instance overrides: ${typedResult.message}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error copying instance overrides: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 设置实例覆盖工具 ====================\n// 工具名称: set_instance_overrides\n// 功能: 将之前复制的覆盖属性应用到选中的组件实例\nserver.tool(\n  \"set_instance_overrides\",\n  \"Apply previously copied overrides to selected component instances. Target instances will be swapped to the source component and all copied override properties will be applied.\",\n  {\n    sourceInstanceId: z.string().describe(\"ID of the source component instance\"),\n    targetNodeIds: z.array(z.string()).describe(\"Array of target instance IDs. Currently selected instances will be used.\")\n  },\n  async ({ sourceInstanceId, targetNodeIds }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_instance_overrides\", {\n        sourceInstanceId: sourceInstanceId,\n        targetNodeIds: targetNodeIds || []\n      });\n      const typedResult = result as setInstanceOverridesResult;\n      \n      if (typedResult.success) {\n        const successCount = typedResult.results?.filter(r => r.success).length || 0;\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Successfully applied ${typedResult.totalCount || 0} overrides to ${successCount} instances.`\n            }\n          ]\n        };\n      } else {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Failed to set instance overrides: ${typedResult.message}`\n            }\n          ]\n        };\n      }\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting instance overrides: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n\n// ==================== 设置圆角工具 ====================\n// 工具名称: set_corner_radius\n// 功能: 设置节点的圆角半径\nserver.tool(\n  \"set_corner_radius\",\n  \"Set the corner radius of a node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to modify\"),\n    radius: z.number().min(0).describe(\"Corner radius value\"),\n    corners: z\n      .array(z.boolean())\n      .length(4)\n      .optional()\n      .describe(\n        \"Optional array of 4 booleans to specify which corners to round [topLeft, topRight, bottomRight, bottomLeft]\"\n      ),\n  },\n  async ({ nodeId, radius, corners }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_corner_radius\", {\n        nodeId,\n        radius,\n        corners: corners || [true, true, true, true],\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set corner radius of node \"${typedResult.name}\" to ${radius}px`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting corner radius: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// Define design strategy prompt\nserver.prompt(\n  \"design_strategy\",\n  \"Best practices for working with Figma designs\",\n  (extra) => {\n    return {\n      messages: [\n        {\n          role: \"assistant\",\n          content: {\n            type: \"text\",\n            text: `When working with Figma designs, follow these best practices:\n\n1. Start with Document Structure:\n   - First use get_document_info() to understand the current document\n   - Plan your layout hierarchy before creating elements\n   - Create a main container frame for each screen/section\n\n2. Naming Conventions:\n   - Use descriptive, semantic names for all elements\n   - Follow a consistent naming pattern (e.g., \"Login Screen\", \"Logo Container\", \"Email Input\")\n   - Group related elements with meaningful names\n\n3. Layout Hierarchy:\n   - Create parent frames first, then add child elements\n   - For forms/login screens:\n     * Start with the main screen container frame\n     * Create a logo container at the top\n     * Group input fields in their own containers\n     * Place action buttons (login, submit) after inputs\n     * Add secondary elements (forgot password, signup links) last\n\n4. Input Fields Structure:\n   - Create a container frame for each input field\n   - Include a label text above or inside the input\n   - Group related inputs (e.g., username/password) together\n\n5. Element Creation:\n   - Use create_frame() for containers and input fields\n   - Use create_text() for labels, buttons text, and links\n   - Set appropriate colors and styles:\n     * Use fillColor for backgrounds\n     * Use strokeColor for borders\n     * Set proper fontWeight for different text elements\n\n6. Mofifying existing elements:\n  - use set_text_content() to modify text content.\n\n7. Visual Hierarchy:\n   - Position elements in logical reading order (top to bottom)\n   - Maintain consistent spacing between elements\n   - Use appropriate font sizes for different text types:\n     * Larger for headings/welcome text\n     * Medium for input labels\n     * Standard for button text\n     * Smaller for helper text/links\n\n8. Best Practices:\n   - Verify each creation with get_node_info()\n   - Use parentId to maintain proper hierarchy\n   - Group related elements together in frames\n   - Keep consistent spacing and alignment\n\nExample Login Screen Structure:\n- Login Screen (main frame)\n  - Logo Container (frame)\n    - Logo (image/text)\n  - Welcome Text (text)\n  - Input Container (frame)\n    - Email Input (frame)\n      - Email Label (text)\n      - Email Field (frame)\n    - Password Input (frame)\n      - Password Label (text)\n      - Password Field (frame)\n  - Login Button (frame)\n    - Button Text (text)\n  - Helper Links (frame)\n    - Forgot Password (text)\n    - Don't have account (text)`,\n          },\n        },\n      ],\n      description: \"Best practices for working with Figma designs\",\n    };\n  }\n);\n\nserver.prompt(\n  \"read_design_strategy\",\n  \"Best practices for reading Figma designs\",\n  (extra) => {\n    return {\n      messages: [\n        {\n          role: \"assistant\",\n          content: {\n            type: \"text\",\n            text: `When reading Figma designs, follow these best practices:\n\n1. Start with selection:\n   - First use read_my_design() to understand the current selection\n   - If no selection ask user to select single or multiple nodes\n`,\n          },\n        },\n      ],\n      description: \"Best practices for reading Figma designs\",\n    };\n  }\n);\n\n// ==================== 扫描文本节点工具 ====================\n// 工具名称: scan_text_nodes\n// 功能: 扫描选中节点中的所有文本节点\nserver.tool(\n  \"scan_text_nodes\",\n  \"Scan all text nodes in the selected Figma node\",\n  {\n    nodeId: z.string().describe(\"ID of the node to scan\"),\n  },\n  async ({ nodeId }) => {\n    try {\n      // Initial response to indicate we're starting the process\n      const initialStatus = {\n        type: \"text\" as const,\n        text: \"Starting text node scanning. This may take a moment for large designs...\",\n      };\n\n      // Use the plugin's scan_text_nodes function with chunking flag\n      const result = await sendCommandToFigma(\"scan_text_nodes\", {\n        nodeId,\n        useChunking: true,  // Enable chunking on the plugin side\n        chunkSize: 10       // Process 10 nodes at a time\n      });\n\n      // If the result indicates chunking was used, format the response accordingly\n      if (result && typeof result === 'object' && 'chunks' in result) {\n        const typedResult = result as {\n          success: boolean,\n          totalNodes: number,\n          processedNodes: number,\n          chunks: number,\n          textNodes: Array<any>\n        };\n\n        const summaryText = `\n        Scan completed:\n        - Found ${typedResult.totalNodes} text nodes\n        - Processed in ${typedResult.chunks} chunks\n        `;\n\n        return {\n          content: [\n            initialStatus,\n            {\n              type: \"text\" as const,\n              text: summaryText\n            },\n            {\n              type: \"text\" as const,\n              text: JSON.stringify(typedResult.textNodes, null, 2)\n            }\n          ],\n        };\n      }\n\n      // If chunking wasn't used or wasn't reported in the result format, return the result as is\n      return {\n        content: [\n          initialStatus,\n          {\n            type: \"text\",\n            text: JSON.stringify(result, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error scanning text nodes: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 按类型扫描节点工具 ====================\n// 工具名称: scan_nodes_by_types\n// 功能: 在选中节点中扫描指定类型的子节点\nserver.tool(\n  \"scan_nodes_by_types\",\n  \"Scan for child nodes with specific types in the selected Figma node\",\n  {\n    nodeId: z.string().describe(\"ID of the node to scan\"),\n    types: z.array(z.string()).describe(\"Array of node types to find in the child nodes (e.g. ['COMPONENT', 'FRAME'])\")\n  },\n  async ({ nodeId, types }) => {\n    try {\n      // Initial response to indicate we're starting the process\n      const initialStatus = {\n        type: \"text\" as const,\n        text: `Starting node type scanning for types: ${types.join(', ')}...`,\n      };\n\n      // Use the plugin's scan_nodes_by_types function\n      const result = await sendCommandToFigma(\"scan_nodes_by_types\", {\n        nodeId,\n        types\n      });\n\n      // Format the response\n      if (result && typeof result === 'object' && 'matchingNodes' in result) {\n        const typedResult = result as {\n          success: boolean,\n          count: number,\n          matchingNodes: Array<{\n            id: string,\n            name: string,\n            type: string,\n            bbox: {\n              x: number,\n              y: number,\n              width: number,\n              height: number\n            }\n          }>,\n          searchedTypes: Array<string>\n        };\n\n        const summaryText = `Scan completed: Found ${typedResult.count} nodes matching types: ${typedResult.searchedTypes.join(', ')}`;\n\n        return {\n          content: [\n            initialStatus,\n            {\n              type: \"text\" as const,\n              text: summaryText\n            },\n            {\n              type: \"text\" as const,\n              text: JSON.stringify(typedResult.matchingNodes, null, 2)\n            }\n          ],\n        };\n      }\n\n      // If the result is in an unexpected format, return it as is\n      return {\n        content: [\n          initialStatus,\n          {\n            type: \"text\",\n            text: JSON.stringify(result, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error scanning nodes by types: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// Text Replacement Strategy Prompt\nserver.prompt(\n  \"text_replacement_strategy\",\n  \"Systematic approach for replacing text in Figma designs\",\n  (extra) => {\n    return {\n      messages: [\n        {\n          role: \"assistant\",\n          content: {\n            type: \"text\",\n            text: `# Intelligent Text Replacement Strategy\n\n## 1. Analyze Design & Identify Structure\n- Scan text nodes to understand the overall structure of the design\n- Use AI pattern recognition to identify logical groupings:\n  * Tables (rows, columns, headers, cells)\n  * Lists (items, headers, nested lists)\n  * Card groups (similar cards with recurring text fields)\n  * Forms (labels, input fields, validation text)\n  * Navigation (menu items, breadcrumbs)\n\\`\\`\\`\nscan_text_nodes(nodeId: \"node-id\")\nget_node_info(nodeId: \"node-id\")  // optional\n\\`\\`\\`\n\n## 2. Strategic Chunking for Complex Designs\n- Divide replacement tasks into logical content chunks based on design structure\n- Use one of these chunking strategies that best fits the design:\n  * **Structural Chunking**: Table rows/columns, list sections, card groups\n  * **Spatial Chunking**: Top-to-bottom, left-to-right in screen areas\n  * **Semantic Chunking**: Content related to the same topic or functionality\n  * **Component-Based Chunking**: Process similar component instances together\n\n## 3. Progressive Replacement with Verification\n- Create a safe copy of the node for text replacement\n- Replace text chunk by chunk with continuous progress updates\n- After each chunk is processed:\n  * Export that section as a small, manageable image\n  * Verify text fits properly and maintain design integrity\n  * Fix issues before proceeding to the next chunk\n\n\\`\\`\\`\n// Clone the node to create a safe copy\nclone_node(nodeId: \"selected-node-id\", x: [new-x], y: [new-y])\n\n// Replace text chunk by chunk\nset_multiple_text_contents(\n  nodeId: \"parent-node-id\", \n  text: [\n    { nodeId: \"node-id-1\", text: \"New text 1\" },\n    // More nodes in this chunk...\n  ]\n)\n\n// Verify chunk with small, targeted image exports\nexport_node_as_image(nodeId: \"chunk-node-id\", format: \"PNG\", scale: 0.5)\n\\`\\`\\`\n\n## 4. Intelligent Handling for Table Data\n- For tabular content:\n  * Process one row or column at a time\n  * Maintain alignment and spacing between cells\n  * Consider conditional formatting based on cell content\n  * Preserve header/data relationships\n\n## 5. Smart Text Adaptation\n- Adaptively handle text based on container constraints:\n  * Auto-detect space constraints and adjust text length\n  * Apply line breaks at appropriate linguistic points\n  * Maintain text hierarchy and emphasis\n  * Consider font scaling for critical content that must fit\n\n## 6. Progressive Feedback Loop\n- Establish a continuous feedback loop during replacement:\n  * Real-time progress updates (0-100%)\n  * Small image exports after each chunk for verification\n  * Issues identified early and resolved incrementally\n  * Quick adjustments applied to subsequent chunks\n\n## 7. Final Verification & Context-Aware QA\n- After all chunks are processed:\n  * Export the entire design at reduced scale for final verification\n  * Check for cross-chunk consistency issues\n  * Verify proper text flow between different sections\n  * Ensure design harmony across the full composition\n\n## 8. Chunk-Specific Export Scale Guidelines\n- Scale exports appropriately based on chunk size:\n  * Small chunks (1-5 elements): scale 1.0\n  * Medium chunks (6-20 elements): scale 0.7\n  * Large chunks (21-50 elements): scale 0.5\n  * Very large chunks (50+ elements): scale 0.3\n  * Full design verification: scale 0.2\n\n## Sample Chunking Strategy for Common Design Types\n\n### Tables\n- Process by logical rows (5-10 rows per chunk)\n- Alternative: Process by column for columnar analysis\n- Tip: Always include header row in first chunk for reference\n\n### Card Lists\n- Group 3-5 similar cards per chunk\n- Process entire cards to maintain internal consistency\n- Verify text-to-image ratio within cards after each chunk\n\n### Forms\n- Group related fields (e.g., \"Personal Information\", \"Payment Details\")\n- Process labels and input fields together\n- Ensure validation messages and hints are updated with their fields\n\n### Navigation & Menus\n- Process hierarchical levels together (main menu, submenu)\n- Respect information architecture relationships\n- Verify menu fit and alignment after replacement\n\n## Best Practices\n- **Preserve Design Intent**: Always prioritize design integrity\n- **Structural Consistency**: Maintain alignment, spacing, and hierarchy\n- **Visual Feedback**: Verify each chunk visually before proceeding\n- **Incremental Improvement**: Learn from each chunk to improve subsequent ones\n- **Balance Automation & Control**: Let AI handle repetitive replacements but maintain oversight\n- **Respect Content Relationships**: Keep related content consistent across chunks\n\nRemember that text is never just text—it's a core design element that must work harmoniously with the overall composition. This chunk-based strategy allows you to methodically transform text while maintaining design integrity.`,\n          },\n        },\n      ],\n      description: \"Systematic approach for replacing text in Figma designs\",\n    };\n  }\n);\n\n// ==================== 批量设置文本内容工具 ====================\n// 工具名称: set_multiple_text_contents\n// 功能: 在节点中并行设置多个文本内容\nserver.tool(\n  \"set_multiple_text_contents\",\n  \"Set multiple text contents parallelly in a node\",\n  {\n    nodeId: z\n      .string()\n      .describe(\"The ID of the node containing the text nodes to replace\"),\n    text: z\n      .array(\n        z.object({\n          nodeId: z.string().describe(\"The ID of the text node\"),\n          text: z.string().describe(\"The replacement text\"),\n        })\n      )\n      .describe(\"Array of text node IDs and their replacement texts\"),\n  },\n  async ({ nodeId, text }, extra) => {\n    try {\n      if (!text || text.length === 0) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"No text provided\",\n            },\n          ],\n        };\n      }\n\n      // Initial response to indicate we're starting the process\n      const initialStatus = {\n        type: \"text\" as const,\n        text: `Starting text replacement for ${text.length} nodes. This will be processed in batches of 5...`,\n      };\n\n      // Track overall progress\n      let totalProcessed = 0;\n      const totalToProcess = text.length;\n\n      // Use the plugin's set_multiple_text_contents function with chunking\n      const result = await sendCommandToFigma(\"set_multiple_text_contents\", {\n        nodeId,\n        text,\n      });\n\n      // Cast the result to a specific type to work with it safely\n      interface TextReplaceResult {\n        success: boolean;\n        nodeId: string;\n        replacementsApplied?: number;\n        replacementsFailed?: number;\n        totalReplacements?: number;\n        completedInChunks?: number;\n        results?: Array<{\n          success: boolean;\n          nodeId: string;\n          error?: string;\n          originalText?: string;\n          translatedText?: string;\n        }>;\n      }\n\n      const typedResult = result as TextReplaceResult;\n\n      // Format the results for display\n      const success = typedResult.replacementsApplied && typedResult.replacementsApplied > 0;\n      const progressText = `\n      Text replacement completed:\n      - ${typedResult.replacementsApplied || 0} of ${totalToProcess} successfully updated\n      - ${typedResult.replacementsFailed || 0} failed\n      - Processed in ${typedResult.completedInChunks || 1} batches\n      `;\n\n      // Detailed results\n      const detailedResults = typedResult.results || [];\n      const failedResults = detailedResults.filter(item => !item.success);\n\n      // Create the detailed part of the response\n      let detailedResponse = \"\";\n      if (failedResults.length > 0) {\n        detailedResponse = `\\n\\nNodes that failed:\\n${failedResults.map(item =>\n          `- ${item.nodeId}: ${item.error || \"Unknown error\"}`\n        ).join('\\n')}`;\n      }\n\n      return {\n        content: [\n          initialStatus,\n          {\n            type: \"text\" as const,\n            text: progressText + detailedResponse,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting multiple text contents: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// Annotation Conversion Strategy Prompt\nserver.prompt(\n  \"annotation_conversion_strategy\",\n  \"Strategy for converting manual annotations to Figma's native annotations\",\n  (extra) => {\n    return {\n      messages: [\n        {\n          role: \"assistant\",\n          content: {\n            type: \"text\",\n            text: `# Automatic Annotation Conversion\n            \n## Process Overview\n\nThe process of converting manual annotations (numbered/alphabetical indicators with connected descriptions) to Figma's native annotations:\n\n1. Get selected frame/component information\n2. Scan and collect all annotation text nodes\n3. Scan target UI elements (components, instances, frames)\n4. Match annotations to appropriate UI elements\n5. Apply native Figma annotations\n\n## Step 1: Get Selection and Initial Setup\n\nFirst, get the selected frame or component that contains annotations:\n\n\\`\\`\\`typescript\n// Get the selected frame/component\nconst selection = await get_selection();\nconst selectedNodeId = selection[0].id\n\n// Get available annotation categories for later use\nconst annotationData = await get_annotations({\n  nodeId: selectedNodeId,\n  includeCategories: true\n});\nconst categories = annotationData.categories;\n\\`\\`\\`\n\n## Step 2: Scan Annotation Text Nodes\n\nScan all text nodes to identify annotations and their descriptions:\n\n\\`\\`\\`typescript\n// Get all text nodes in the selection\nconst textNodes = await scan_text_nodes({\n  nodeId: selectedNodeId\n});\n\n// Filter and group annotation markers and descriptions\n\n// Markers typically have these characteristics:\n// - Short text content (usually single digit/letter)\n// - Specific font styles (often bold)\n// - Located in a container with \"Marker\" or \"Dot\" in the name\n// - Have a clear naming pattern (e.g., \"1\", \"2\", \"3\" or \"A\", \"B\", \"C\")\n\n\n// Identify description nodes\n// Usually longer text nodes near markers or with matching numbers in path\n  \n\\`\\`\\`\n\n## Step 3: Scan Target UI Elements\n\nGet all potential target elements that annotations might refer to:\n\n\\`\\`\\`typescript\n// Scan for all UI elements that could be annotation targets\nconst targetNodes = await scan_nodes_by_types({\n  nodeId: selectedNodeId,\n  types: [\n    \"COMPONENT\",\n    \"INSTANCE\",\n    \"FRAME\"\n  ]\n});\n\\`\\`\\`\n\n## Step 4: Match Annotations to Targets\n\nMatch each annotation to its target UI element using these strategies in order of priority:\n\n1. **Path-Based Matching**:\n   - Look at the marker's parent container name in the Figma layer hierarchy\n   - Remove any \"Marker:\" or \"Annotation:\" prefixes from the parent name\n   - Find UI elements that share the same parent name or have it in their path\n   - This works well when markers are grouped with their target elements\n\n2. **Name-Based Matching**:\n   - Extract key terms from the annotation description\n   - Look for UI elements whose names contain these key terms\n   - Consider both exact matches and semantic similarities\n   - Particularly effective for form fields, buttons, and labeled components\n\n3. **Proximity-Based Matching** (fallback):\n   - Calculate the center point of the marker\n   - Find the closest UI element by measuring distances to element centers\n   - Consider the marker's position relative to nearby elements\n   - Use this method when other matching strategies fail\n\nAdditional Matching Considerations:\n- Give higher priority to matches found through path-based matching\n- Consider the type of UI element when evaluating matches\n- Take into account the annotation's context and content\n- Use a combination of strategies for more accurate matching\n\n## Step 5: Apply Native Annotations\n\nConvert matched annotations to Figma's native annotations using batch processing:\n\n\\`\\`\\`typescript\n// Prepare annotations array for batch processing\nconst annotationsToApply = Object.values(annotations).map(({ marker, description }) => {\n  // Find target using multiple strategies\n  const target = \n    findTargetByPath(marker, targetNodes) ||\n    findTargetByName(description, targetNodes) ||\n    findTargetByProximity(marker, targetNodes);\n  \n  if (target) {\n    // Determine appropriate category based on content\n    const category = determineCategory(description.characters, categories);\n\n    // Determine appropriate additional annotationProperty based on content\n    const annotationProperty = determineProperties(description.characters, target.type);\n    \n    return {\n      nodeId: target.id,\n      labelMarkdown: description.characters,\n      categoryId: category.id,\n      properties: annotationProperty\n    };\n  }\n  return null;\n}).filter(Boolean); // Remove null entries\n\n// Apply annotations in batches using set_multiple_annotations\nif (annotationsToApply.length > 0) {\n  await set_multiple_annotations({\n    nodeId: selectedNodeId,\n    annotations: annotationsToApply\n  });\n}\n\\`\\`\\`\n\n\nThis strategy focuses on practical implementation based on real-world usage patterns, emphasizing the importance of handling various UI elements as annotation targets, not just text nodes.`\n          },\n        },\n      ],\n      description: \"Strategy for converting manual annotations to Figma's native annotations\",\n    };\n  }\n);\n\n// Instance Slot Filling Strategy Prompt\nserver.prompt(\n  \"swap_overrides_instances\",\n  \"Guide to swap instance overrides between instances\",\n  (extra) => {\n    return {\n      messages: [\n        {\n          role: \"assistant\",\n          content: {\n            type: \"text\",\n            text: `# Swap Component Instance and Override Strategy\n\n## Overview\nThis strategy enables transferring content and property overrides from a source instance to one or more target instances in Figma, maintaining design consistency while reducing manual work.\n\n## Step-by-Step Process\n\n### 1. Selection Analysis\n- Use \\`get_selection()\\` to identify the parent component or selected instances\n- For parent components, scan for instances with \\`scan_nodes_by_types({ nodeId: \"parent-id\", types: [\"INSTANCE\"] })\\`\n- Identify custom slots by name patterns (e.g. \"Custom Slot*\" or \"Instance Slot\") or by examining text content\n- Determine which is the source instance (with content to copy) and which are targets (where to apply content)\n\n### 2. Extract Source Overrides\n- Use \\`get_instance_overrides()\\` to extract customizations from the source instance\n- This captures text content, property values, and style overrides\n- Command syntax: \\`get_instance_overrides({ nodeId: \"source-instance-id\" })\\`\n- Look for successful response like \"Got component information from [instance name]\"\n\n### 3. Apply Overrides to Targets\n- Apply captured overrides using \\`set_instance_overrides()\\`\n- Command syntax:\n  \\`\\`\\`\n  set_instance_overrides({\n    sourceInstanceId: \"source-instance-id\", \n    targetNodeIds: [\"target-id-1\", \"target-id-2\", ...]\n  })\n  \\`\\`\\`\n\n### 4. Verification\n- Verify results with \\`get_node_info()\\` or \\`read_my_design()\\`\n- Confirm text content and style overrides have transferred successfully\n\n## Key Tips\n- Always join the appropriate channel first with \\`join_channel()\\`\n- When working with multiple targets, check the full selection with \\`get_selection()\\`\n- Preserve component relationships by using instance overrides rather than direct text manipulation`,\n          },\n        },\n      ],\n      description: \"Strategy for transferring overrides between component instances in Figma\",\n    };\n  }\n);\n\n// ==================== 设置布局模式工具 ====================\n// 工具名称: set_layout_mode\n// 功能: 设置框架的布局模式和换行行为\nserver.tool(\n  \"set_layout_mode\",\n  \"Set the layout mode and wrap behavior of a frame in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the frame to modify\"),\n    layoutMode: z.enum([\"NONE\", \"HORIZONTAL\", \"VERTICAL\"]).describe(\"Layout mode for the frame\"),\n    layoutWrap: z.enum([\"NO_WRAP\", \"WRAP\"]).optional().describe(\"Whether the auto-layout frame wraps its children\")\n  },\n  async ({ nodeId, layoutMode, layoutWrap }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_layout_mode\", {\n        nodeId,\n        layoutMode,\n        layoutWrap: layoutWrap || \"NO_WRAP\"\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set layout mode of frame \"${typedResult.name}\" to ${layoutMode}${layoutWrap ? ` with ${layoutWrap}` : ''}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting layout mode: ${error instanceof Error ? error.message : String(error)}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 设置内边距工具 ====================\n// 工具名称: set_padding\n// 功能: 为自动布局框架设置内边距值\nserver.tool(\n  \"set_padding\",\n  \"Set padding values for an auto-layout frame in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the frame to modify\"),\n    paddingTop: z.number().optional().describe(\"Top padding value\"),\n    paddingRight: z.number().optional().describe(\"Right padding value\"),\n    paddingBottom: z.number().optional().describe(\"Bottom padding value\"),\n    paddingLeft: z.number().optional().describe(\"Left padding value\"),\n  },\n  async ({ nodeId, paddingTop, paddingRight, paddingBottom, paddingLeft }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_padding\", {\n        nodeId,\n        paddingTop,\n        paddingRight,\n        paddingBottom,\n        paddingLeft,\n      });\n      const typedResult = result as { name: string };\n\n      // Create a message about which padding values were set\n      const paddingMessages = [];\n      if (paddingTop !== undefined) paddingMessages.push(`top: ${paddingTop}`);\n      if (paddingRight !== undefined) paddingMessages.push(`right: ${paddingRight}`);\n      if (paddingBottom !== undefined) paddingMessages.push(`bottom: ${paddingBottom}`);\n      if (paddingLeft !== undefined) paddingMessages.push(`left: ${paddingLeft}`);\n\n      const paddingText = paddingMessages.length > 0\n        ? `padding (${paddingMessages.join(', ')})`\n        : \"padding\";\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set ${paddingText} for frame \"${typedResult.name}\"`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting padding: ${error instanceof Error ? error.message : String(error)}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 设置轴对齐工具 ====================\n// 工具名称: set_axis_align\n// 功能: 为自动布局框架设置主轴和交叉轴对齐方式\nserver.tool(\n  \"set_axis_align\",\n  \"Set primary and counter axis alignment for an auto-layout frame in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the frame to modify\"),\n    primaryAxisAlignItems: z\n      .enum([\"MIN\", \"MAX\", \"CENTER\", \"SPACE_BETWEEN\"])\n      .optional()\n      .describe(\"Primary axis alignment (MIN/MAX = left/right in horizontal, top/bottom in vertical). Note: When set to SPACE_BETWEEN, itemSpacing will be ignored as children will be evenly spaced.\"),\n    counterAxisAlignItems: z\n      .enum([\"MIN\", \"MAX\", \"CENTER\", \"BASELINE\"])\n      .optional()\n      .describe(\"Counter axis alignment (MIN/MAX = top/bottom in horizontal, left/right in vertical)\")\n  },\n  async ({ nodeId, primaryAxisAlignItems, counterAxisAlignItems }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_axis_align\", {\n        nodeId,\n        primaryAxisAlignItems,\n        counterAxisAlignItems\n      });\n      const typedResult = result as { name: string };\n\n      // Create a message about which alignments were set\n      const alignMessages = [];\n      if (primaryAxisAlignItems !== undefined) alignMessages.push(`primary: ${primaryAxisAlignItems}`);\n      if (counterAxisAlignItems !== undefined) alignMessages.push(`counter: ${counterAxisAlignItems}`);\n\n      const alignText = alignMessages.length > 0\n        ? `axis alignment (${alignMessages.join(', ')})`\n        : \"axis alignment\";\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set ${alignText} for frame \"${typedResult.name}\"`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting axis alignment: ${error instanceof Error ? error.message : String(error)}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 设置布局尺寸工具 ====================\n// 工具名称: set_layout_sizing\n// 功能: 为自动布局框架设置水平和垂直尺寸模式\nserver.tool(\n  \"set_layout_sizing\",\n  \"Set horizontal and vertical sizing modes for an auto-layout frame in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the frame to modify\"),\n    layoutSizingHorizontal: z\n      .enum([\"FIXED\", \"HUG\", \"FILL\"])\n      .optional()\n      .describe(\"Horizontal sizing mode (HUG for frames/text only, FILL for auto-layout children only)\"),\n    layoutSizingVertical: z\n      .enum([\"FIXED\", \"HUG\", \"FILL\"])\n      .optional()\n      .describe(\"Vertical sizing mode (HUG for frames/text only, FILL for auto-layout children only)\")\n  },\n  async ({ nodeId, layoutSizingHorizontal, layoutSizingVertical }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_layout_sizing\", {\n        nodeId,\n        layoutSizingHorizontal,\n        layoutSizingVertical\n      });\n      const typedResult = result as { name: string };\n\n      // Create a message about which sizing modes were set\n      const sizingMessages = [];\n      if (layoutSizingHorizontal !== undefined) sizingMessages.push(`horizontal: ${layoutSizingHorizontal}`);\n      if (layoutSizingVertical !== undefined) sizingMessages.push(`vertical: ${layoutSizingVertical}`);\n\n      const sizingText = sizingMessages.length > 0\n        ? `layout sizing (${sizingMessages.join(', ')})`\n        : \"layout sizing\";\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set ${sizingText} for frame \"${typedResult.name}\"`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting layout sizing: ${error instanceof Error ? error.message : String(error)}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 设置元素间距工具 ====================\n// 工具名称: set_item_spacing\n// 功能: 设置自动布局框架中子元素之间的距离\nserver.tool(\n  \"set_item_spacing\",\n  \"Set distance between children in an auto-layout frame\",\n  {\n    nodeId: z.string().describe(\"The ID of the frame to modify\"),\n    itemSpacing: z.number().describe(\"Distance between children. Note: This value will be ignored if primaryAxisAlignItems is set to SPACE_BETWEEN.\")\n  },\n  async ({ nodeId, itemSpacing }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_item_spacing\", {\n        nodeId,\n        itemSpacing\n      });\n      const typedResult = result as { name: string };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set item spacing to ${itemSpacing} for frame \"${typedResult.name}\"`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting item spacing: ${error instanceof Error ? error.message : String(error)}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 获取原型反应工具 ====================\n// 工具名称: get_reactions\n// 功能: 获取多个节点的Figma原型反应，用于生成连接线\nserver.tool(\n  \"get_reactions\",\n  \"Get Figma Prototyping Reactions from multiple nodes. CRITICAL: The output MUST be processed using the 'reaction_to_connector_strategy' prompt IMMEDIATELY to generate parameters for connector lines via the 'create_connections' tool.\",\n  {\n    nodeIds: z.array(z.string()).describe(\"Array of node IDs to get reactions from\"),\n  },\n  async ({ nodeIds }) => {\n    try {\n      const result = await sendCommandToFigma(\"get_reactions\", { nodeIds });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          },\n          {\n            type: \"text\",\n            text: \"IMPORTANT: You MUST now use the reaction data above and follow the `reaction_to_connector_strategy` prompt to prepare the parameters for the `create_connections` tool call. This is a required next step.\"\n          }\n        ],\n        followUp: {\n          type: \"prompt\",\n          prompt: \"reaction_to_connector_strategy\",\n        },\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting reactions: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n\n// ==================== 设置默认连接器工具 ====================\n// 工具名称: set_default_connector\n// 功能: 设置复制的连接器节点为默认连接器\nserver.tool(\n  \"set_default_connector\",\n  \"Set a copied connector node as the default connector\",\n  {\n    connectorId: z.string().optional().describe(\"The ID of the connector node to set as default\")\n  },\n  async ({ connectorId }) => {\n    try {\n      const result = await sendCommandToFigma(\"set_default_connector\", {\n        connectorId\n      });\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Default connector set: ${JSON.stringify(result)}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting default connector: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 创建连接工具 ====================\n// 工具名称: create_connections\n// 功能: 使用默认连接器样式在节点之间创建连接\nserver.tool(\n  \"create_connections\",\n  \"Create connections between nodes using the default connector style\",\n  {\n    connections: z.array(z.object({\n      startNodeId: z.string().describe(\"ID of the starting node\"),\n      endNodeId: z.string().describe(\"ID of the ending node\"),\n      text: z.string().optional().describe(\"Optional text to display on the connector\")\n    })).describe(\"Array of node connections to create\")\n  },\n  async ({ connections }) => {\n    try {\n      if (!connections || connections.length === 0) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"No connections provided\"\n            }\n          ]\n        };\n      }\n\n      const result = await sendCommandToFigma(\"create_connections\", {\n        connections\n      });\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Created ${connections.length} connections: ${JSON.stringify(result)}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating connections: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Strategy for converting Figma prototype reactions to connector lines\nserver.prompt(\n  \"reaction_to_connector_strategy\",\n  \"Strategy for converting Figma prototype reactions to connector lines using the output of 'get_reactions'\",\n  (extra) => {\n    return {\n      messages: [\n        {\n          role: \"assistant\",\n          content: {\n            type: \"text\",\n            text: `# Strategy: Convert Figma Prototype Reactions to Connector Lines\n\n## Goal\nProcess the JSON output from the \\`get_reactions\\` tool to generate an array of connection objects suitable for the \\`create_connections\\` tool. This visually represents prototype flows as connector lines on the Figma canvas.\n\n## Input Data\nYou will receive JSON data from the \\`get_reactions\\` tool. This data contains an array of nodes, each with potential reactions. A typical reaction object looks like this:\n\\`\\`\\`json\n{\n  \"trigger\": { \"type\": \"ON_CLICK\" },\n  \"action\": {\n    \"type\": \"NAVIGATE\",\n    \"destinationId\": \"destination-node-id\",\n    \"navigationTransition\": { ... },\n    \"preserveScrollPosition\": false\n  }\n}\n\\`\\`\\`\n\n## Step-by-Step Process\n\n### 1. Preparation & Context Gathering\n   - **Action:** Call \\`read_my_design\\` on the relevant node(s) to get context about the nodes involved (names, types, etc.). This helps in generating meaningful connector labels later.\n   - **Action:** Call \\`set_default_connector\\` **without** the \\`connectorId\\` parameter.\n   - **Check Result:** Analyze the response from \\`set_default_connector\\`.\n     - If it confirms a default connector is already set (e.g., \"Default connector is already set\"), proceed to Step 2.\n     - If it indicates no default connector is set (e.g., \"No default connector set...\"), you **cannot** proceed with \\`create_connections\\` yet. Inform the user they need to manually copy a connector from FigJam, paste it onto the current page, select it, and then you can run \\`set_default_connector({ connectorId: \"SELECTED_NODE_ID\" })\\` before attempting \\`create_connections\\`. **Do not proceed to Step 2 until a default connector is confirmed.**\n\n### 2. Filter and Transform Reactions from \\`get_reactions\\` Output\n   - **Iterate:** Go through the JSON array provided by \\`get_reactions\\`. For each node in the array:\n     - Iterate through its \\`reactions\\` array.\n   - **Filter:** Keep only reactions where the \\`action\\` meets these criteria:\n     - Has a \\`type\\` that implies a connection (e.g., \\`NAVIGATE\\`, \\`OPEN_OVERLAY\\`, \\`SWAP_OVERLAY\\`). **Ignore** types like \\`CHANGE_TO\\`, \\`CLOSE_OVERLAY\\`, etc.\n     - Has a valid \\`destinationId\\` property.\n   - **Extract:** For each valid reaction, extract the following information:\n     - \\`sourceNodeId\\`: The ID of the node the reaction belongs to (from the outer loop).\n     - \\`destinationNodeId\\`: The value of \\`action.destinationId\\`.\n     - \\`actionType\\`: The value of \\`action.type\\`.\n     - \\`triggerType\\`: The value of \\`trigger.type\\`.\n\n### 3. Generate Connector Text Labels\n   - **For each extracted connection:** Create a concise, descriptive text label string.\n   - **Combine Information:** Use the \\`actionType\\`, \\`triggerType\\`, and potentially the names of the source/destination nodes (obtained from Step 1's \\`read_my_design\\` or by calling \\`get_node_info\\` if necessary) to generate the label.\n   - **Example Labels:**\n     - If \\`triggerType\\` is \"ON\\_CLICK\" and \\`actionType\\` is \"NAVIGATE\": \"On click, navigate to [Destination Node Name]\"\n     - If \\`triggerType\\` is \"ON\\_DRAG\" and \\`actionType\\` is \"OPEN\\_OVERLAY\": \"On drag, open [Destination Node Name] overlay\"\n   - **Keep it brief and informative.** Let this generated string be \\`generatedText\\`.\n\n### 4. Prepare the \\`connections\\` Array for \\`create_connections\\`\n   - **Structure:** Create a JSON array where each element is an object representing a connection.\n   - **Format:** Each object in the array must have the following structure:\n     \\`\\`\\`json\n     {\n       \"startNodeId\": \"sourceNodeId_from_step_2\",\n       \"endNodeId\": \"destinationNodeId_from_step_2\",\n       \"text\": \"generatedText_from_step_3\"\n     }\n     \\`\\`\\`\n   - **Result:** This final array is the value you will pass to the \\`connections\\` parameter when calling the \\`create_connections\\` tool.\n\n### 5. Execute Connection Creation\n   - **Action:** Call the \\`create_connections\\` tool, passing the array generated in Step 4 as the \\`connections\\` argument.\n   - **Verify:** Check the response from \\`create_connections\\` to confirm success or failure.\n\nThis detailed process ensures you correctly interpret the reaction data, prepare the necessary information, and use the appropriate tools to create the connector lines.`\n          },\n        },\n      ],\n      description: \"Strategy for converting Figma prototype reactions to connector lines using the output of 'get_reactions'\",\n    };\n  }\n);\n\n\n// Define command types and parameters\ntype FigmaCommand =\n  | \"get_document_info\"\n  | \"get_selection\"\n  | \"get_node_info\"\n  | \"get_nodes_info\"\n  | \"read_my_design\"\n  | \"create_rectangle\"\n  | \"create_frame\"\n  | \"create_text\"\n  | \"set_fill_color\"\n  | \"set_stroke_color\"\n  | \"move_node\"\n  | \"move_node_to_parent\"\n  | \"move_multiple_nodes_to_parent\"\n  | \"resize_node\"\n  | \"delete_node\"\n  | \"delete_multiple_nodes\"\n  | \"get_styles\"\n  | \"get_local_components\"\n  | \"create_component_instance\"\n  | \"get_instance_overrides\"\n  | \"set_instance_overrides\"\n  | \"export_node_as_image\"\n  | \"join\"\n  | \"set_corner_radius\"\n  | \"clone_node\"\n  | \"set_text_content\"\n  | \"scan_text_nodes\"\n  | \"set_multiple_text_contents\"\n  | \"get_annotations\"\n  | \"set_annotation\"\n  | \"set_multiple_annotations\"\n  | \"scan_nodes_by_types\"\n  | \"set_layout_mode\"\n  | \"set_padding\"\n  | \"set_axis_align\"\n  | \"set_layout_sizing\"\n  | \"set_item_spacing\"\n  | \"get_reactions\"\n  | \"set_default_connector\"\n  | \"create_connections\";\n\ntype CommandParams = {\n  get_document_info: Record<string, never>;\n  get_selection: Record<string, never>;\n  get_node_info: { nodeId: string };\n  get_nodes_info: { nodeIds: string[] };\n  create_rectangle: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    name?: string;\n    parentId?: string;\n  };\n  create_frame: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    name?: string;\n    parentId?: string;\n    fillColor?: { r: number; g: number; b: number; a?: number };\n    strokeColor?: { r: number; g: number; b: number; a?: number };\n    strokeWeight?: number;\n  };\n  create_text: {\n    x: number;\n    y: number;\n    text: string;\n    fontSize?: number;\n    fontWeight?: number;\n    fontColor?: { r: number; g: number; b: number; a?: number };\n    name?: string;\n    parentId?: string;\n  };\n  set_fill_color: {\n    nodeId: string;\n    r: number;\n    g: number;\n    b: number;\n    a?: number;\n  };\n  set_stroke_color: {\n    nodeId: string;\n    r: number;\n    g: number;\n    b: number;\n    a?: number;\n    weight?: number;\n  };\n  move_node: {\n    nodeId: string;\n    x: number;\n    y: number;\n  };\n  move_node_to_parent: {\n    nodeId: string;\n    parentId: string;\n    x?: number;\n    y?: number;\n    index?: number;\n  };\n  move_multiple_nodes_to_parent: {\n    nodeIds: string[];\n    parentId: string;\n    preserveRelativePositions?: boolean;\n    startIndex?: number;\n  };\n  resize_node: {\n    nodeId: string;\n    width: number;\n    height: number;\n  };\n  delete_node: {\n    nodeId: string;\n  };\n  delete_multiple_nodes: {\n    nodeIds: string[];\n  };\n  get_styles: Record<string, never>;\n  get_local_components: Record<string, never>;\n  get_team_components: Record<string, never>;\n  create_component_instance: {\n    componentKey: string;\n    x: number;\n    y: number;\n  };\n  get_instance_overrides: {\n    instanceNodeId: string | null;\n  };\n  set_instance_overrides: {\n    targetNodeIds: string[];\n    sourceInstanceId: string;\n  };\n  export_node_as_image: {\n    nodeId: string;\n    format?: \"PNG\" | \"JPG\" | \"SVG\" | \"PDF\";\n    scale?: number;\n  };\n  execute_code: {\n    code: string;\n  };\n  join: {\n    channel: string;\n  };\n  set_corner_radius: {\n    nodeId: string;\n    radius: number;\n    corners?: boolean[];\n  };\n  clone_node: {\n    nodeId: string;\n    x?: number;\n    y?: number;\n  };\n  set_text_content: {\n    nodeId: string;\n    text: string;\n  };\n  scan_text_nodes: {\n    nodeId: string;\n    useChunking: boolean;\n    chunkSize: number;\n  };\n  set_multiple_text_contents: {\n    nodeId: string;\n    text: Array<{ nodeId: string; text: string }>;\n  };\n  get_annotations: {\n    nodeId?: string;\n    includeCategories?: boolean;\n  };\n  set_annotation: {\n    nodeId: string;\n    annotationId?: string;\n    labelMarkdown: string;\n    categoryId?: string;\n    properties?: Array<{ type: string }>;\n  };\n  set_multiple_annotations: SetMultipleAnnotationsParams;\n  scan_nodes_by_types: {\n    nodeId: string;\n    types: Array<string>;\n  };\n  get_reactions: { nodeIds: string[] };\n  set_default_connector: {\n    connectorId?: string | undefined;\n  };\n  create_connections: {\n    connections: Array<{\n      startNodeId: string;\n      endNodeId: string;\n      text?: string;\n    }>;\n  };\n  \n};\n\n\n  // Helper function to process Figma node responses\nfunction processFigmaNodeResponse(result: unknown): any {\n  if (!result || typeof result !== \"object\") {\n    return result;\n  }\n\n  // Check if this looks like a node response\n  const resultObj = result as Record<string, unknown>;\n  if (\"id\" in resultObj && typeof resultObj.id === \"string\") {\n    // It appears to be a node response, log the details\n    console.info(\n      `Processed Figma node: ${resultObj.name || \"Unknown\"} (ID: ${resultObj.id\n      })`\n    );\n\n    if (\"x\" in resultObj && \"y\" in resultObj) {\n      console.debug(`Node position: (${resultObj.x}, ${resultObj.y})`);\n    }\n\n    if (\"width\" in resultObj && \"height\" in resultObj) {\n      console.debug(`Node dimensions: ${resultObj.width}×${resultObj.height}`);\n    }\n  }\n\n  return result;\n}\n\n// Update the connectToFigma function\nfunction connectToFigma(port: number = 3055) {\n  // If already connected, do nothing\n  if (ws && ws.readyState === WebSocket.OPEN) {\n    logger.info('Already connected to Figma');\n    return;\n  }\n\n  const wsUrl = serverUrl === 'localhost' ? `${WS_URL}:${port}` : WS_URL;\n  logger.info(`Connecting to Figma socket server at ${wsUrl}...`);\n  ws = new WebSocket(wsUrl);\n\n  // 设置连接超时\n  const connectionTimeout = setTimeout(() => {\n    if (ws && ws.readyState === WebSocket.CONNECTING) {\n      logger.error('Connection timeout, closing WebSocket');\n      ws.close();\n    }\n  }, 10000); // 10秒连接超时\n\n  ws.on('open', () => {\n    clearTimeout(connectionTimeout);\n    logger.info('Connected to Figma socket server');\n    // Reset channel on new connection\n    currentChannel = null;\n    \n    // 发送心跳包以保持连接\n    const heartbeatInterval = setInterval(() => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          type: \"ping\",\n          timestamp: Date.now()\n        }));\n      } else {\n        clearInterval(heartbeatInterval);\n      }\n    }, 30000); // 每30秒发送一次心跳\n  });\n\n  ws.on(\"message\", (data: any) => {\n    try {\n      // Define a more specific type with an index signature to allow any property access\n      interface ProgressMessage {\n        message: FigmaResponse | any;\n        type?: string;\n        id?: string;\n        [key: string]: any; // Allow any other properties\n      }\n\n      const json = JSON.parse(data) as ProgressMessage;\n\n      // 处理心跳响应\n      if (json.type === 'ping') {\n        // 响应心跳包\n        if (ws && ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: \"pong\",\n            timestamp: Date.now()\n          }));\n        }\n        return;\n      }\n\n      // Handle progress updates\n      if (json.type === 'progress_update') {\n        const progressData = json.message.data as CommandProgressUpdate;\n        const requestId = json.id || '';\n\n        if (requestId && pendingRequests.has(requestId)) {\n          const request = pendingRequests.get(requestId)!;\n\n          // Update last activity timestamp\n          request.lastActivity = Date.now();\n\n          // Reset the timeout to prevent timeouts during long-running operations\n          clearTimeout(request.timeout);\n\n          // Create a new timeout with extended duration for active operations\n          request.timeout = setTimeout(() => {\n            if (pendingRequests.has(requestId)) {\n              logger.error(`Request ${requestId} timed out after extended period of inactivity`);\n              pendingRequests.delete(requestId);\n              request.reject(new Error('Request to Figma timed out'));\n            }\n          }, 120000); // 2分钟超时用于活跃操作\n\n          // Log progress\n          logger.info(`Progress update for ${progressData.commandType}: ${progressData.progress}% - ${progressData.message}`);\n\n          // For completed updates, we could resolve the request early if desired\n          if (progressData.status === 'completed' && progressData.progress === 100) {\n            // Optionally resolve early with partial data\n            // request.resolve(progressData.payload);\n            // pendingRequests.delete(requestId);\n\n            // Instead, just log the completion, wait for final result from Figma\n            logger.info(`Operation ${progressData.commandType} completed, waiting for final result`);\n          }\n        }\n        return;\n      }\n\n      // Handle regular responses\n      const myResponse = json.message;\n      logger.debug(`Received message: ${JSON.stringify(myResponse)}`);\n      logger.log('myResponse' + JSON.stringify(myResponse));\n\n      // Handle response to a request\n      if (\n        myResponse.id &&\n        pendingRequests.has(myResponse.id) &&\n        myResponse.result\n      ) {\n        const request = pendingRequests.get(myResponse.id)!;\n        clearTimeout(request.timeout);\n\n        if (myResponse.error) {\n          logger.error(`Error from Figma: ${myResponse.error}`);\n          request.reject(new Error(myResponse.error));\n        } else {\n          if (myResponse.result) {\n            request.resolve(myResponse.result);\n          }\n        }\n\n        pendingRequests.delete(myResponse.id);\n      } else {\n        // Handle broadcast messages or events\n        logger.info(`Received broadcast message: ${JSON.stringify(myResponse)}`);\n      }\n    } catch (error) {\n      logger.error(`Error parsing message: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  });\n\n  ws.on('error', (error) => {\n    clearTimeout(connectionTimeout);\n    logger.error(`Socket error: ${error}`);\n    \n    // 清理所有待处理的请求\n    for (const [id, request] of pendingRequests.entries()) {\n      clearTimeout(request.timeout);\n      request.reject(new Error(`Connection error: ${error}`));\n      pendingRequests.delete(id);\n    }\n  });\n\n  ws.on('close', (code, reason) => {\n    clearTimeout(connectionTimeout);\n    logger.info(`Disconnected from Figma socket server. Code: ${code}, Reason: ${reason}`);\n    ws = null;\n\n    // Reject all pending requests\n    for (const [id, request] of pendingRequests.entries()) {\n      clearTimeout(request.timeout);\n      request.reject(new Error(\"Connection closed\"));\n      pendingRequests.delete(id);\n    }\n\n    // 智能重连策略 - 限制重连次数\n    if (code !== 1000) { // 1000 是正常关闭代码\n      if (reconnectAttempts < 5) { // 最多重连5次\n        reconnectAttempts++;\n        const reconnectDelay = Math.min(5000, 1000 * Math.pow(2, Math.min(5, reconnectAttempts))); // 指数退避，最大5秒\n        logger.info(`Attempting to reconnect (${reconnectAttempts}/5) in ${reconnectDelay}ms...`);\n        setTimeout(() => {\n          if (!ws || ws.readyState === WebSocket.CLOSED) {\n            connectToFigma(port);\n          }\n        }, reconnectDelay);\n      } else {\n        logger.warn('Maximum reconnection attempts reached. WebSocket connection will be attempted when needed.');\n        reconnectAttempts = 0; // 重置计数器，以便后续手动重连\n      }\n    }\n  });\n}\n\n// Function to join a channel\nasync function joinChannel(channelName: string): Promise<void> {\n  if (!ws || ws.readyState !== WebSocket.OPEN) {\n    throw new Error(\"Not connected to Figma\");\n  }\n\n  try {\n    await sendCommandToFigma(\"join\", { channel: channelName });\n    currentChannel = channelName;\n    logger.info(`Joined channel: ${channelName}`);\n  } catch (error) {\n    logger.error(`Failed to join channel: ${error instanceof Error ? error.message : String(error)}`);\n    throw error;\n  }\n}\n\n// Function to send commands to Figma\nfunction sendCommandToFigma(\n  command: FigmaCommand,\n  params: unknown = {},\n  timeoutMs: number = 60000 // 增加默认超时时间到60秒\n): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    // If not connected, try to connect first\n    if (!ws || ws.readyState !== WebSocket.OPEN) {\n      connectToFigma();\n      reject(new Error(\"Not connected to Figma. Attempting to connect...\"));\n      return;\n    }\n\n    // Check if we need a channel for this command\n    const requiresChannel = command !== \"join\";\n    if (requiresChannel && !currentChannel) {\n      reject(new Error(\"Must join a channel before sending commands\"));\n      return;\n    }\n\n    const id = uuidv4();\n    const request = {\n      id,\n      type: command === \"join\" ? \"join\" : \"message\",\n      ...(command === \"join\"\n        ? { channel: (params as any).channel }\n        : { channel: currentChannel }),\n      message: {\n        id,\n        command,\n        params: {\n          ...(params as any),\n          commandId: id, // Include the command ID in params\n        },\n      },\n    };\n\n    // 根据命令类型设置不同的超时时间\n    let actualTimeout = timeoutMs;\n    const longRunningCommands = [\n      'get_local_components', \n      'get_styles', \n      'scan_text_nodes', \n      'set_multiple_text_contents',\n      'set_multiple_annotations',\n      'export_node_as_image'\n    ];\n    \n    if (longRunningCommands.includes(command)) {\n      actualTimeout = Math.max(timeoutMs, 120000); // 至少2分钟\n      logger.info(`Using extended timeout of ${actualTimeout}ms for command: ${command}`);\n    }\n\n    // Set timeout for request\n    const timeout = setTimeout(() => {\n      if (pendingRequests.has(id)) {\n        pendingRequests.delete(id);\n        logger.error(`Request ${id} to Figma timed out after ${actualTimeout / 1000} seconds`);\n        reject(new Error(`Request to Figma timed out after ${actualTimeout / 1000} seconds`));\n      }\n    }, actualTimeout);\n\n    // Store the promise callbacks to resolve/reject later\n    pendingRequests.set(id, {\n      resolve,\n      reject,\n      timeout,\n      lastActivity: Date.now()\n    });\n\n    // Send the request\n    logger.info(`Sending command to Figma: ${command} (timeout: ${actualTimeout}ms)`);\n    logger.debug(`Request details: ${JSON.stringify(request)}`);\n    ws.send(JSON.stringify(request));\n  });\n}\n\n// ==================== 加入频道工具 ====================\n// 工具名称: join_channel\n// 功能: 加入指定频道与Figma通信\nserver.tool(\n  \"join_channel\",\n  \"Join a specific channel to communicate with Figma\",\n  {\n    channel: z.string().describe(\"The name of the channel to join (components or design)\").default(\"\"),\n  },\n  async ({ channel }) => {\n    try {\n      if (!channel) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"Please provide a channel name to join. Available channels: 'components' or 'design'\",\n            },\n          ],\n        };\n      }\n\n      // Validate channel name\n      if (channel !== \"components\" && channel !== \"design\") {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"Invalid channel name. Please use 'components' or 'design'\",\n          },\n          ],\n        };\n      }\n\n      await joinChannel(channel);\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Successfully joined channel: ${channel}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error joining channel: ${error instanceof Error ? error.message : String(error)\n              }`,\n          },\n        ],\n      };\n    }\n  }\n);\n       \n// Start the server\nasync function main() {\n  // Start the MCP server with stdio transport first\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  logger.info('FigmaMCP server running on stdio');\n  \n  // Try to connect to Figma socket server in background\n  // Don't block the MCP server startup if WebSocket connection fails\n  setTimeout(() => {\n    try {\n    connectToFigma();\n  } catch (error) {\n    logger.warn(`Could not connect to Figma initially: ${error instanceof Error ? error.message : String(error)}`);\n    logger.warn('Will try to connect when the first command is sent');\n  }\n  }, 1000);\n}\n\n// Run the server\nmain().catch(error => {\n  logger.error(`Error starting FigmaMCP server: ${error instanceof Error ? error.message : String(error)}`);\n  process.exit(1);\n});\n\n// 添加智能频道识别和切换功能\nasync function smartChannelSwitch(userInput: string): Promise<string> {\n  const designKeywords = ['设计页', '设计稿', '界面设计', '页面设计', '生成设计', '创建界面', '设计界面'];\n  const componentKeywords = ['组件库', '组件', '设计系统', '组件规范', '设计规范'];\n  \n  const lowerInput = userInput.toLowerCase();\n  \n  // 检查是否包含设计页关键词\n  const hasDesignKeywords = designKeywords.some(keyword => lowerInput.includes(keyword));\n  const hasComponentKeywords = componentKeywords.some(keyword => lowerInput.includes(keyword));\n  \n  let targetChannel: string = currentChannel || 'design'; // 默认为设计页\n  \n  if (hasDesignKeywords && !hasComponentKeywords) {\n    targetChannel = 'design';\n  } else if (hasComponentKeywords && !hasDesignKeywords) {\n    targetChannel = 'components';\n  } else if (hasDesignKeywords && hasComponentKeywords) {\n    // 如果同时包含两种关键词，优先选择设计页（因为通常是要在设计页中使用组件库的组件）\n    targetChannel = 'design';\n  }\n  \n  // 如果需要切换频道\n  if (targetChannel !== currentChannel) {\n    try {\n      await joinChannel(targetChannel);\n      return `已自动切换到${targetChannel === 'design' ? '设计页' : '组件库'}频道`;\n    } catch (error) {\n      throw new Error(`切换到${targetChannel}频道失败: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n  \n  return `当前已在${currentChannel === 'design' ? '设计页' : currentChannel === 'components' ? '组件库' : '未知'}频道`;\n}\n\n// ==================== 增强组件实例创建工具 ====================\n// 工具名称: create_component_instance_enhanced\n// 功能: 创建组件实例并确保正确定位（增强版）\nserver.tool(\n  \"create_component_instance_enhanced\",\n  \"创建组件实例并确保正确定位（增强版）\",\n  {\n    componentKey: z.string().describe(\"组件的key值\"),\n    x: z.number().describe(\"X坐标位置\"),\n    y: z.number().describe(\"Y坐标位置\"),\n    parentId: z.string().optional().describe(\"可选的父容器ID\"),\n    name: z.string().optional().describe(\"实例的自定义名称\")\n  },\n  async ({ componentKey, x, y, parentId, name }) => {\n    try {\n      // 保存当前频道\n      const originalChannel = currentChannel;\n      \n      // 首先验证组件是否存在 - 需要在组件库频道中查找\n      let componentExists = false;\n      let availableComponents = null;\n      \n      try {\n        // 临时切换到组件库频道获取组件信息\n        if (currentChannel !== 'components') {\n          await joinChannel('components');\n        }\n        \n        availableComponents = await sendCommandToFigma(\"get_local_components\");\n        componentExists = (availableComponents as any)?.components?.some((comp: any) => comp.key === componentKey);\n        \n        // 切换回原频道\n        if (originalChannel && originalChannel !== 'components' && typeof originalChannel === 'string') {\n          await joinChannel(originalChannel);\n        }\n      } catch (channelError) {\n        console.warn(\"频道切换或组件获取失败:\", channelError);\n        // 如果频道切换失败，尝试在当前频道查找\n        const currentComponents = await sendCommandToFigma(\"get_local_components\");\n        componentExists = (currentComponents as any)?.components?.some((comp: any) => comp.key === componentKey);\n      }\n      \n      if (!componentExists) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `❌ 错误：找不到key为 \"${componentKey}\" 的组件。请检查组件key是否正确。\n可用组件数量: ${(availableComponents as any)?.count || 0}`\n            }\n          ]\n        };\n      }\n\n      // 创建组件实例\n      const result = await sendCommandToFigma(\"create_component_instance\", {\n        componentKey,\n        x,\n        y\n      });\n      \n      const typedResult = result as any;\n      \n      // 如果指定了父容器，将实例移动到父容器中\n      if (parentId && typedResult.id) {\n        try {\n          await sendCommandToFigma(\"move_node_to_parent\", {\n            nodeId: typedResult.id,\n            parentId: parentId,\n            x: x,\n            y: y\n          });\n        } catch (moveError) {\n          console.warn(\"移动到父容器失败:\", moveError);\n        }\n      }\n      \n      // 如果指定了自定义名称，可以尝试重命名（如果API支持）\n      if (name && typedResult.id) {\n        // 这里可以添加重命名逻辑\n      }\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `✅ 成功创建组件实例！\n📍 位置: (${x}, ${y})\n🆔 实例ID: ${typedResult.id || '未知'}\n📝 组件Key: ${componentKey}\n${parentId ? `📁 父容器: ${parentId}` : ''}\n${name ? `🏷️ 自定义名称: ${name}` : ''}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 创建组件实例失败: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 增强克隆节点工具 ====================\n// 工具名称: clone_node_enhanced\n// 功能: 克隆节点并确保正确定位（增强版）\nserver.tool(\n  \"clone_node_enhanced\", \n  \"克隆节点并确保正确定位（增强版）\",\n  {\n    nodeId: z.string().describe(\"要克隆的节点ID\"),\n    x: z.number().describe(\"新位置的X坐标\"),\n    y: z.number().describe(\"新位置的Y坐标\"),\n    name: z.string().optional().describe(\"克隆节点的自定义名称\"),\n    verifyPosition: z.boolean().default(true).describe(\"是否验证克隆后的位置\")\n  },\n  async ({ nodeId, x, y, name, verifyPosition }) => {\n    try {\n      // 首先获取原节点信息\n      const originalNode = await sendCommandToFigma(\"get_node_info\", { nodeId });\n      \n      // 执行克隆\n      const result = await sendCommandToFigma('clone_node', { nodeId, x, y });\n      const typedResult = result as { name: string, id: string };\n      \n      // 验证克隆是否成功\n      if (!typedResult.id) {\n        throw new Error(\"克隆失败：未返回新节点ID\");\n      }\n      \n      // 如果启用位置验证，检查克隆后的位置\n      if (verifyPosition) {\n        try {\n          const clonedNode = await sendCommandToFigma(\"get_node_info\", { nodeId: typedResult.id });\n          const clonedNodeData = clonedNode as any;\n          \n          if (clonedNodeData.x !== x || clonedNodeData.y !== y) {\n            // 如果位置不正确，尝试手动移动\n            await sendCommandToFigma(\"move_node\", { \n              nodeId: typedResult.id, \n              x, \n              y \n            });\n          }\n        } catch (verifyError) {\n          console.warn(\"位置验证失败:\", verifyError);\n        }\n      }\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `✅ 成功克隆节点！\n📍 目标位置: (${x}, ${y})\n🆔 新节点ID: ${typedResult.id}\n📝 新节点名称: ${typedResult.name}\n🔄 原节点ID: ${nodeId}\n${name ? `🏷️ 自定义名称: ${name}` : ''}\n${verifyPosition ? '✅ 已验证位置正确性' : ''}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 克隆节点失败: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 智能设计稿生成工具 ====================\n// 工具名称: generate_design_with_reference\n// 功能: 基于参考图和组件库生成设计稿（智能版）\nserver.tool(\n  \"generate_design_with_reference\",\n  \"基于参考图和组件库生成设计稿（智能版）\",\n  {\n    description: z.string().describe(\"设计需求描述\"),\n    referenceImageAnalysis: z.string().optional().describe(\"参考图分析结果\"),\n    useComponents: z.boolean().default(true).describe(\"是否使用组件库中的组件\"),\n    targetChannel: z.enum([\"design\", \"components\"]).optional().describe(\"目标频道，如果不指定将自动识别\")\n  },\n  async ({ description, referenceImageAnalysis, useComponents, targetChannel }) => {\n    try {\n      // 智能频道切换\n      let channelSwitchResult = \"\";\n      if (targetChannel) {\n        if (targetChannel !== currentChannel) {\n          await joinChannel(targetChannel);\n          channelSwitchResult = `已切换到${targetChannel === 'design' ? '设计页' : '组件库'}频道。`;\n        }\n      } else {\n        channelSwitchResult = await smartChannelSwitch(description);\n      }\n      \n      // 获取当前文档信息\n      const documentInfo = await sendCommandToFigma(\"get_document_info\");\n      \n      // 如果需要使用组件，获取组件库信息\n      let availableComponents = null;\n      if (useComponents) {\n        try {\n          // 临时切换到组件库频道获取组件信息\n          const originalChannel = currentChannel;\n          if (currentChannel !== 'components') {\n            await joinChannel('components');\n          }\n          \n          availableComponents = await sendCommandToFigma(\"get_local_components\");\n          \n          // 切换回原频道\n          if (originalChannel && originalChannel !== 'components' && typeof originalChannel === 'string') {\n            await joinChannel(originalChannel);\n          }\n        } catch (componentError) {\n          console.warn(\"获取组件库信息失败:\", componentError);\n        }\n      }\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🎨 智能设计稿生成已启动！\n\n📋 设计需求: ${description}\n📍 ${channelSwitchResult}\n📄 当前文档: ${(documentInfo as any)?.name || '未知'}\n🧩 组件库状态: ${useComponents ? (availableComponents ? '✅ 已加载' : '❌ 加载失败') : '🚫 未使用'}\n${referenceImageAnalysis ? `🖼️ 参考图分析: ${referenceImageAnalysis}` : ''}\n\n💡 建议的设计流程:\n1. 分析设计需求和参考图\n2. 规划页面布局结构\n3. 选择合适的组件库组件\n4. 创建主容器框架\n5. 逐步添加和定位元素\n6. 应用设计系统规范\n7. 验证与参考图的一致性\n\n🚀 准备开始设计稿生成...`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 智能设计稿生成初始化失败: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 参考图对比验证工具 ====================\n// 工具名称: verify_design_against_reference\n// 功能: 对比设计稿与参考图的一致性\nserver.tool(\n  \"verify_design_against_reference\",\n  \"对比设计稿与参考图的一致性\",\n  {\n    designNodeId: z.string().describe(\"设计稿节点ID\"),\n    referenceDescription: z.string().describe(\"参考图描述或分析结果\"),\n    checkPoints: z.array(z.string()).optional().describe(\"需要检查的要点列表\"),\n    exportForComparison: z.boolean().default(false).describe(\"是否导出设计稿用于对比\")\n  },\n  async ({ designNodeId, referenceDescription, checkPoints, exportForComparison }) => {\n    try {\n      // 获取设计稿节点信息\n      const designNode = await sendCommandToFigma(\"get_node_info\", { nodeId: designNodeId });\n      const nodeData = designNode as any;\n      \n      // 如果需要导出进行对比\n      let exportResult = null;\n      if (exportForComparison) {\n        try {\n          exportResult = await sendCommandToFigma(\"export_node_as_image\", {\n            nodeId: designNodeId,\n            format: \"PNG\",\n            scale: 1\n          });\n        } catch (exportError) {\n          console.warn(\"导出设计稿失败:\", exportError);\n        }\n      }\n      \n      // 基础检查项目\n      const defaultCheckPoints = [\n        \"整体布局结构\",\n        \"颜色使用是否符合设计系统\",\n        \"字体大小和层级\",\n        \"间距和对齐\",\n        \"组件使用的正确性\"\n      ];\n      \n      const finalCheckPoints = checkPoints || defaultCheckPoints;\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔍 设计稿验证报告\n\n📋 设计节点: ${nodeData.name || designNodeId}\n📐 尺寸: ${nodeData.width || '未知'} x ${nodeData.height || '未知'}\n📍 位置: (${nodeData.x || 0}, ${nodeData.y || 0})\n\n🖼️ 参考图描述:\n${referenceDescription}\n\n✅ 检查要点:\n${finalCheckPoints.map((point, index) => `${index + 1}. ${point}`).join('\\n')}\n\n💡 验证建议:\n1. 对比整体布局是否与参考图一致\n2. 检查颜色是否符合设计系统规范\n3. 验证文字层级和大小是否合适\n4. 确认间距和对齐是否精确\n5. 检查组件使用是否正确\n\n${exportResult ? '📸 设计稿已导出，可用于详细对比' : ''}\n\n🚨 注意事项:\n- 请仔细对比每个细节\n- 确保符合设计系统规范\n- 注意用户体验的一致性`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 设计稿验证失败: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 设计稿质量检查工具 ====================\n// 工具名称: design_quality_check\n// 功能: 检查设计稿的质量和规范性\nserver.tool(\n  \"design_quality_check\",\n  \"检查设计稿的质量和规范性\",\n  {\n    nodeId: z.string().describe(\"要检查的设计稿节点ID\"),\n    checkDesignSystem: z.boolean().default(true).describe(\"是否检查设计系统规范\"),\n    checkAccessibility: z.boolean().default(true).describe(\"是否检查可访问性\"),\n    generateReport: z.boolean().default(true).describe(\"是否生成详细报告\")\n  },\n  async ({ nodeId, checkDesignSystem, checkAccessibility, generateReport }) => {\n    try {\n      // 获取节点信息\n      const nodeInfo = await sendCommandToFigma(\"get_node_info\", { nodeId });\n      const nodeData = nodeInfo as any;\n      \n      // 扫描子节点\n      const childNodes = await sendCommandToFigma(\"scan_nodes_by_types\", {\n        nodeId,\n        types: [\"TEXT\", \"RECTANGLE\", \"FRAME\", \"COMPONENT\", \"INSTANCE\"]\n      });\n      \n      const issues: string[] = [];\n      const suggestions: string[] = [];\n      \n      // 基础检查\n      if (!nodeData.name || nodeData.name.includes(\"Rectangle\") || nodeData.name.includes(\"Frame\")) {\n        issues.push(\"节点命名不规范，建议使用语义化名称\");\n      }\n      \n      // 设计系统检查\n      if (checkDesignSystem) {\n        // 这里可以添加更多设计系统规范检查\n        suggestions.push(\"检查颜色是否使用设计系统中定义的颜色\");\n        suggestions.push(\"验证字体大小是否符合设计系统规范\");\n        suggestions.push(\"确认间距使用设计系统中的标准间距\");\n      }\n      \n      // 可访问性检查\n      if (checkAccessibility) {\n        suggestions.push(\"检查文字对比度是否符合WCAG标准\");\n        suggestions.push(\"确认交互元素的最小点击区域\");\n        suggestions.push(\"验证颜色不是唯一的信息传达方式\");\n      }\n      \n      const qualityScore = Math.max(0, 100 - (issues.length * 10));\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `📊 设计质量检查报告\n\n🎯 检查节点: ${nodeData.name || nodeId}\n📏 尺寸: ${nodeData.width || '未知'} x ${nodeData.height || '未知'}\n⭐ 质量评分: ${qualityScore}/100\n\n${issues.length > 0 ? `🚨 发现问题 (${issues.length}个):\n${issues.map((issue, index) => `${index + 1}. ${issue}`).join('\\n')}` : '✅ 未发现明显问题'}\n\n💡 改进建议:\n${suggestions.map((suggestion, index) => `${index + 1}. ${suggestion}`).join('\\n')}\n\n📋 检查项目:\n✅ 节点命名规范\n${checkDesignSystem ? '✅ 设计系统规范' : '⏭️ 跳过设计系统检查'}\n${checkAccessibility ? '✅ 可访问性标准' : '⏭️ 跳过可访问性检查'}\n\n🎯 总体评价:\n${qualityScore >= 90 ? '🌟 优秀 - 设计质量很高' : \n  qualityScore >= 70 ? '👍 良好 - 有一些改进空间' : \n  qualityScore >= 50 ? '⚠️ 一般 - 需要较多改进' : \n  '🚨 需要重大改进'}\n\n${generateReport ? `\n📄 详细报告已生成，包含所有检查项目的详细信息。\n建议根据报告逐项改进设计稿质量。` : ''}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 设计质量检查失败: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 批量组件实例创建工具 ====================\n// 工具名称: create_multiple_component_instances\n// 功能: 批量创建多个组件实例\nserver.tool(\n  \"create_multiple_component_instances\",\n  \"批量创建多个组件实例\",\n  {\n    instances: z.array(z.object({\n      componentKey: z.string().describe(\"组件key\"),\n      x: z.number().describe(\"X坐标\"),\n      y: z.number().describe(\"Y坐标\"),\n      name: z.string().optional().describe(\"实例名称\")\n    })).describe(\"要创建的实例列表\"),\n    verifyPositions: z.boolean().default(true).describe(\"是否验证每个实例的位置\")\n  },\n  async ({ instances, verifyPositions }) => {\n    try {\n      const results: any[] = [];\n      const errors: string[] = [];\n      \n      for (const instance of instances) {\n        try {\n          const result = await sendCommandToFigma(\"create_component_instance\", {\n            componentKey: instance.componentKey,\n            x: instance.x,\n            y: instance.y\n          });\n          \n          results.push({\n            ...instance,\n            result,\n            success: true\n          });\n          \n          // 如果启用位置验证\n          if (verifyPositions && (result as any).id) {\n            try {\n              const nodeInfo = await sendCommandToFigma(\"get_node_info\", { \n                nodeId: (result as any).id \n              });\n              const nodeData = nodeInfo as any;\n              \n              if (Math.abs(nodeData.x - instance.x) > 1 || Math.abs(nodeData.y - instance.y) > 1) {\n                // 位置不准确，尝试修正\n                await sendCommandToFigma(\"move_node\", {\n                  nodeId: (result as any).id,\n                  x: instance.x,\n                  y: instance.y\n                });\n              }\n            } catch (verifyError) {\n              console.warn(`位置验证失败 (${instance.componentKey}):`, verifyError);\n            }\n          }\n          \n        } catch (instanceError) {\n          errors.push(`创建实例失败 (${instance.componentKey}): ${instanceError instanceof Error ? instanceError.message : String(instanceError)}`);\n          results.push({\n            ...instance,\n            success: false,\n            error: instanceError instanceof Error ? instanceError.message : String(instanceError)\n          });\n        }\n      }\n      \n      const successCount = results.filter(r => r.success).length;\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🎯 批量组件实例创建完成！\n\n📊 创建统计:\n✅ 成功: ${successCount}/${instances.length}\n❌ 失败: ${errors.length}\n\n${successCount > 0 ? `✅ 成功创建的实例:\n${results.filter(r => r.success).map((r, index) => \n  `${index + 1}. ${r.name || r.componentKey} - 位置: (${r.x}, ${r.y})`\n).join('\\n')}` : ''}\n\n${errors.length > 0 ? `❌ 创建失败的实例:\n${errors.map((error, index) => `${index + 1}. ${error}`).join('\\n')}` : ''}\n\n${verifyPositions ? '✅ 已验证所有实例位置' : '⏭️ 跳过位置验证'}\n\n💡 建议:\n- 检查失败的实例是否使用了正确的组件key\n- 确认坐标位置是否合理\n- 验证组件是否在当前文档中可用`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 批量创建组件实例失败: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// ==================== 游戏页面生成器工具 ====================\n// 工具名称: generate_game_page_design\n// 功能: 生成游戏切换页Figma设计稿 - 一键创建完整的移动端游戏切换页面\nserver.tool(\n  \"generate_game_page_design\",\n  \"生成游戏切换页Figma设计稿 - 一键创建完整的移动端游戏切换页面\",\n  {\n    pageWidth: z.number().default(375).describe(\"页面宽度，默认375px\"),\n    pageHeight: z.number().default(812).describe(\"页面高度，默认812px\"),\n    baseX: z.number().default(100).describe(\"页面起始X坐标\"),\n    baseY: z.number().default(100).describe(\"页面起始Y坐标\"),\n    useComponents: z.boolean().default(true).describe(\"是否使用组件库中的组件\"),\n    theme: z.enum([\"dark\", \"light\"]).default(\"dark\").describe(\"主题风格\"),\n    includeHomeIndicator: z.boolean().default(true).describe(\"是否包含Home Indicator\")\n  },\n  async ({ pageWidth, pageHeight, baseX, baseY, useComponents, theme, includeHomeIndicator }) => {\n    try {\n      logger.info(\"开始生成游戏切换页设计稿...\");\n      \n      // 游戏数据配置\n      const gameData = [\n        // 第1行\n        [\n          { name: \"阴阳师\", iconKey: \"c675c56fbd4b307f492b320e06c4e9f8e7882625\" },\n          { name: \"梦幻西游\", iconKey: \"dbcd45502f3c6888427a80aa3126136ee1268993\" },\n          { name: \"猎魂觉醒\", iconKey: \"6806f1a993852b5981f1e38af00a9ed77ef1c42e\" },\n          { name: \"大唐无双\", iconKey: \"49f8a9b61a1fe4c7b3beba08235e18e00c553c31\" }\n        ],\n        // 第2行\n        [\n          { name: \"一梦江湖\", iconKey: \"2c0cab4b3e89e8efa47b48f2669563098f63802a\" },\n          { name: \"荒野行动\", iconKey: \"55edebb9a5d8168df2a20964bbe52838d6134600\" },\n          { name: \"明日之后\", iconKey: \"48e80ff27b07c87af963a15ffd073d6e22a323c2\" },\n          { name: \"天谕手游\", iconKey: \"89820da4bb6fd5e9859882a2eb2e423dcb6c35e7\" }\n        ],\n        // 第3行\n        [\n          { name: \"天下手游\", iconKey: \"8efcd030f5634cd906aef3038c82716862585beb\" },\n          { name: \"倩女幽魂\", iconKey: \"d3f22cd33b5f106af0c8e155743d42951a671094\" },\n          { name: \"EVE手游\", iconKey: \"8825c181bcdb2f6a6c74c3f8061a44938b5c043e\" },\n          { name: \"镇魂曲\", iconKey: \"ae09f748d761d75f3751a3f4d607d7585b06836d\" }\n        ],\n        // 第4行\n        [\n          { name: \"非人学园\", iconKey: \"347c3dadae89d97d9cf1f4f1071da560dc368988\" },\n          { name: \"轩辕剑\", iconKey: \"584cd306fe14dc076fef56a414779e7ac1a616bb\" },\n          { name: \"猫和老鼠\", iconKey: \"fec533b2c963f0b4811b3ac099bb8e12473cdd5a\" },\n          { name: \"遇见逆水寒\", iconKey: \"018e7625d61a9509c90c571bddce4f1634e7dd49\" }\n        ],\n        // 第5行\n        [\n          { name: \"萤火突击\", iconKey: \"f308e104010c1a53cc33251e91d8d9a0464d6568\" },\n          { name: \"无尽战区\", iconKey: \"fd9030da6bcd00c39e8755b13f2fa077f30345d2\" },\n          { name: \"忘川风华录\", iconKey: \"100c092428d2431a5bfa646fb8e37a7dbf25af43\" },\n          { name: \"第五人格\", iconKey: \"907d7862f22264aeb4d00a494b23214bfb3241ed\" }\n        ],\n        // 第6行\n        [\n          { name: \"蛋仔派对\", iconKey: \"f6df4571da44f141ade575cf9dbe2b88954b8ecd\" },\n          { name: \"大话西游\", iconKey: \"6b305b38a5eb3bdfc6caa3fe8015abd47d760304\" },\n          { name: \"超凡先锋\", iconKey: \"b70b3e1ee042d94da86fdf5bc055f03394a28e44\" },\n          { name: \"暗黑破坏神\", iconKey: \"1e2119322cef621bc417c8cdf7a58326fe66e544\" }\n        ]\n      ];\n\n      // 组件Key配置\n      const componentKeys = {\n        statusBar: \"dd59b1e5415d8118b717f3aa7b15905bf7df1825\",\n        searchBar: \"d9cee5e7e307c1a4e5fa53b259c4dfa61fbd8c6a\",\n        homeIndicator: \"b7a0740409b6250db848c85c25f8d4833f84af3d\",\n        filterAny: \"3e061776588ed6053e2dc8cfddcb08e8e7fb00cb\",\n        filterSelected: \"19e6b11c59b8e77940fc8cdb0234da69d4b0e308\",\n        filterUnselected: \"103d7fd5af7385dd4663890c18527f43c9906ad0\"\n      };\n\n      // 颜色配置 - 修正颜色设置\n      const colors = theme === \"dark\" ? {\n        background: { r: 0.98, g: 0.98, b: 0.98, a: 1 }, // 浅色背景\n        gameGridBackground: { r: 0.98, g: 0.98, b: 0.98, a: 1 }, // #FAFAFA\n        cardBackground: { r: 1, g: 1, b: 1, a: 0 },\n        transparent: { r: 1, g: 1, b: 1, a: 0 }, // 透明填充\n        text: { r: 0.1, g: 0.1, b: 0.1, a: 1 },\n        textSecondary: { r: 0.4, g: 0.4, b: 0.4, a: 1 }\n      } : {\n        background: { r: 0.98, g: 0.98, b: 0.98, a: 1 }, // 浅色背景\n        gameGridBackground: { r: 0.98, g: 0.98, b: 0.98, a: 1 }, // #FAFAFA\n        cardBackground: { r: 1, g: 1, b: 1, a: 0 },\n        transparent: { r: 1, g: 1, b: 1, a: 0 }, // 透明填充\n        text: { r: 0.1, g: 0.1, b: 0.1, a: 1 },\n        textSecondary: { r: 0.4, g: 0.4, b: 0.4, a: 1 }\n      };\n\n      let createdElements: string[] = [];\n\n      // 步骤1：创建主框架\n      logger.info(\"创建主框架...\");\n      const mainFrame = await sendCommandToFigma(\"create_frame\", {\n        x: baseX,\n        y: baseY,\n        width: pageWidth,\n        height: pageHeight,\n        name: \"游戏切换页\",\n        fillColor: colors.background,\n        layoutMode: \"VERTICAL\",\n        paddingTop: 0,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0,\n        itemSpacing: 0,\n        primaryAxisAlignItems: \"MIN\",\n        counterAxisAlignItems: \"MIN\"\n      });\n      const mainFrameId = (mainFrame as any).id;\n      \n      createdElements.push(`主框架: ${mainFrameId}`);\n\n      // 步骤2：添加状态栏\n      if (useComponents) {\n        logger.info(\"添加状态栏...\");\n        const statusBar = await sendCommandToFigma(\"create_component_instance\", {\n          componentKey: componentKeys.statusBar,\n          x: baseX,\n          y: baseY,\n          parentId: mainFrameId\n        });\n        \n        createdElements.push(`状态栏: ${(statusBar as any).id}`);\n      }\n\n      // 步骤3：添加搜索栏\n      if (useComponents) {\n        logger.info(\"添加搜索栏...\");\n        const searchBar = await sendCommandToFigma(\"create_component_instance\", {\n          componentKey: componentKeys.searchBar,\n          x: baseX,\n          y: baseY + 44,\n          parentId: mainFrameId\n        });\n        \n        createdElements.push(`搜索栏: ${(searchBar as any).id}`);\n      }\n\n      // 步骤4：创建分类过滤器区域\n      logger.info(\"创建分类过滤器...\");\n      const filterFrame = await sendCommandToFigma(\"create_frame\", {\n        x: baseX,\n        y: baseY + 88,\n        width: pageWidth,\n        height: 60,\n        name: \"分类过滤器\",\n        fillColor: colors.cardBackground,\n        layoutMode: \"HORIZONTAL\",\n        paddingTop: 12,\n        paddingBottom: 12,\n        paddingLeft: 16,\n        paddingRight: 16,\n        itemSpacing: 24,\n        primaryAxisAlignItems: \"MIN\",\n        counterAxisAlignItems: \"CENTER\",\n        parentId: mainFrameId\n      });\n      const filterFrameId = (filterFrame as any).id;\n      \n      createdElements.push(`分类过滤器: ${filterFrameId}`);\n\n      // 添加过滤器按钮 - 修正顺序：全部、手游（选中）、端游\n      if (useComponents) {\n        const filterButtons = [\n          { key: componentKeys.filterAny, name: \"全部\", x: baseX + 16 },\n          { key: componentKeys.filterSelected, name: \"手游-选中\", x: baseX + 88 },\n          { key: componentKeys.filterUnselected, name: \"端游\", x: baseX + 160 }\n        ];\n\n        for (const button of filterButtons) {\n          const filterButton = await sendCommandToFigma(\"create_component_instance\", {\n            componentKey: button.key,\n            x: button.x,\n            y: baseY + 100,\n            parentId: filterFrameId\n          });\n          \n          createdElements.push(`${button.name}: ${(filterButton as any).id}`);\n        }\n      }\n\n      // 步骤5：创建游戏网格区域\n      logger.info(\"创建游戏网格区域...\");\n      const gameGridFrame = await sendCommandToFigma(\"create_frame\", {\n        x: baseX,\n        y: baseY + 148,\n        width: pageWidth,\n        height: 600,\n        name: \"游戏网格区域\",\n        fillColor: colors.transparent, // 设置为透明\n        layoutMode: \"VERTICAL\",\n        paddingTop: 20,\n        paddingBottom: 20,\n        paddingLeft: 16,\n        paddingRight: 16,\n        itemSpacing: 20,\n        primaryAxisAlignItems: \"MIN\",\n        counterAxisAlignItems: \"MIN\",\n        parentId: mainFrameId\n      });\n      const gameGridFrameId = (gameGridFrame as any).id;\n      \n      createdElements.push(`游戏网格区域: ${gameGridFrameId}`);\n\n      // 步骤6：创建游戏行和游戏图标\n      logger.info(\"创建游戏内容...\");\n      for (let rowIndex = 0; rowIndex < gameData.length; rowIndex++) {\n        const rowData = gameData[rowIndex];\n        \n        // 创建游戏行框架\n        const gameRow = await sendCommandToFigma(\"create_frame\", {\n          x: baseX + 16,\n          y: baseY + 168 + (rowIndex * 105),\n          width: pageWidth - 32,\n          height: 85,\n          name: `游戏行${rowIndex + 1}`,\n          fillColor: colors.transparent, // 设置为透明\n          layoutMode: \"HORIZONTAL\",\n          paddingTop: 0,\n          paddingBottom: 0,\n          paddingLeft: 0,\n          paddingRight: 0,\n          itemSpacing: 0,\n          primaryAxisAlignItems: \"SPACE_BETWEEN\",\n          counterAxisAlignItems: \"MIN\",\n          parentId: gameGridFrameId\n        });\n        const gameRowId = (gameRow as any).id;\n        \n        createdElements.push(`游戏行${rowIndex + 1}: ${gameRowId}`);\n\n        // 为每行创建4个游戏容器\n        for (let colIndex = 0; colIndex < 4; colIndex++) {\n          if (rowData[colIndex]) {\n            const game = rowData[colIndex];\n            const gameX = baseX + 16 + (colIndex * 85);\n            const gameY = baseY + 168 + (rowIndex * 105);\n\n            // 创建游戏容器\n            const gameContainer = await sendCommandToFigma(\"create_frame\", {\n              x: gameX,\n              y: gameY,\n              width: 70,\n              height: 85,\n              name: `游戏容器-${game.name}`,\n              fillColor: colors.transparent, // 设置为透明\n              layoutMode: \"VERTICAL\",\n              paddingTop: 0,\n              paddingBottom: 0,\n              paddingLeft: 0,\n              paddingRight: 0,\n              itemSpacing: 8,\n              primaryAxisAlignItems: \"MIN\",\n              counterAxisAlignItems: \"CENTER\",\n              parentId: gameRowId\n            });\n            const gameContainerId = (gameContainer as any).id;\n\n            // 添加游戏图标\n            if (useComponents && game.iconKey) {\n              try {\n                const gameIcon = await sendCommandToFigma(\"create_component_instance\", {\n                  componentKey: game.iconKey,\n                  x: gameX + 5,\n                  y: gameY,\n                  parentId: gameContainerId\n                });\n                \n                createdElements.push(`${game.name}图标: ${(gameIcon as any).id}`);\n              } catch (iconError) {\n                // 如果组件不存在，创建占位符\n                const placeholder = await sendCommandToFigma(\"create_rectangle\", {\n                  x: gameX + 5,\n                  y: gameY,\n                  width: 60,\n                  height: 60,\n                  name: `${game.name}图标占位符`,\n                  parentId: gameContainerId\n                });\n                \n                createdElements.push(`${game.name}占位符: ${(placeholder as any).id}`);\n              }\n            }\n\n            // 添加游戏名称\n            const gameName = await sendCommandToFigma(\"create_text\", {\n              x: gameX + 5,\n              y: gameY + 68,\n              text: game.name,\n              name: `游戏名-${game.name}`,\n              fontSize: 12,\n              fontColor: colors.textSecondary,\n              parentId: gameContainerId\n            });\n            \n            createdElements.push(`${game.name}文字: ${(gameName as any).id}`);\n          }\n        }\n      }\n\n      // 步骤7：添加Home Indicator（如果需要）\n      if (includeHomeIndicator && useComponents) {\n        logger.info(\"添加Home Indicator...\");\n        const homeIndicator = await sendCommandToFigma(\"create_component_instance\", {\n          componentKey: componentKeys.homeIndicator,\n          x: baseX,\n          y: baseY + pageHeight - 34,\n          parentId: mainFrameId\n        });\n        \n        createdElements.push(`Home Indicator: ${(homeIndicator as any).id}`);\n      }\n\n      logger.info(\"游戏切换页设计稿生成完成！\");\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🎮 游戏切换页设计稿生成成功！\n\n📱 页面规格:\n• 尺寸: ${pageWidth} x ${pageHeight}px\n• 主题: ${theme === \"dark\" ? \"深色\" : \"浅色\"}主题\n• 位置: (${baseX}, ${baseY})\n\n🎯 生成内容:\n✅ 状态栏和搜索栏\n✅ 分类过滤器（手游选中状态）\n✅ 6行4列游戏网格布局（共24个游戏）\n✅ 使用组件库中的游戏图标\n${includeHomeIndicator ? '✅ Home Indicator' : '⏭️ 跳过Home Indicator'}\n\n📊 创建统计:\n• 主框架: 1个\n• 系统组件: ${useComponents ? '3个' : '0个（跳过）'}\n• 过滤器按钮: ${useComponents ? '4个' : '0个（跳过）'}\n• 游戏容器: 24个\n• 游戏图标: 24个\n• 游戏名称: 24个\n\n🎨 设计特色:\n• 现代化${theme === \"dark\" ? \"深色\" : \"浅色\"}主题\n• 响应式自动布局\n• 标准移动端尺寸\n• 组件化设计系统\n• 完整的交互状态\n\n💡 使用建议:\n1. 可以调整游戏图标的圆角和阴影\n2. 根据需要修改分类过滤器的选中状态\n3. 可以添加更多游戏或调整网格布局\n4. 建议为交互元素添加悬停和点击状态\n\n🔧 创建的元素ID:\n${createdElements.slice(0, 10).join('\\n')}\n${createdElements.length > 10 ? `\\n... 还有${createdElements.length - 10}个元素` : ''}\n\n主框架ID: ${mainFrameId}\n现在您可以在Figma中查看和编辑这个完整的游戏切换页设计稿！`\n          }\n        ]\n      };\n    } catch (error) {\n      logger.error(`游戏页面生成失败: ${error instanceof Error ? error.message : String(error)}`);\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ 游戏切换页生成失败: ${error instanceof Error ? error.message : String(error)}\n\n🔧 故障排除建议:\n1. 确保已连接到Figma并加入了正确的频道\n2. 检查组件库是否包含所需的组件\n3. 验证坐标位置是否合理\n4. 确认Figma文档有足够的空间\n\n请检查错误信息并重试。`\n          }\n        ]\n      };\n    }\n  }\n);\n\n\n\n"],"mappings":"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","names":["WebSocket","resolve","uuidv4"]}